!function(e){function t(t){for(var i,s,o=t[0],l=t[1],h=t[2],d=0,f=[];d<o.length;d++)s=o[d],Object.prototype.hasOwnProperty.call(r,s)&&r[s]&&f.push(r[s][0]),r[s]=0;for(i in l)Object.prototype.hasOwnProperty.call(l,i)&&(e[i]=l[i]);for(_&&_(t);f.length;)f.shift()();return a.push.apply(a,h||[]),n()}function n(){for(var e,t=0;t<a.length;t++){for(var n=a[t],i=!0,o=1;o<n.length;o++){var l=n[o];0!==r[l]&&(i=!1)}i&&(a.splice(t--,1),e=s(s.s=n[0]))}return e}var i={},r={0:0},a=[];function s(t){if(i[t])return i[t].exports;var n=i[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=i,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)s.d(n,i,function(t){return e[t]}.bind(null,i));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="";var o=window.webpackJsonp=window.webpackJsonp||[],l=o.push.bind(o);o.push=t,o=o.slice();for(var h=0;h<o.length;h++)t(o[h]);var _=l;a.push([101,1]),n()}({101:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function s(e){try{l(i.next(e))}catch(e){a(e)}}function o(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}l((i=i.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,i,r,a,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(r=(r=s.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(32),s=n(113),o=n(271);var l=function(){function e(){}return e.prototype.init=function(){return i(this,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return[4,o.loadCategories()];case 1:return e=t.sent(),this.model=a.sequential({layers:[a.layers.conv2d({filters:64,kernelSize:[1,3],inputShape:[2048,3,1]}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.conv2d({filters:64,kernelSize:1}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.conv2d({filters:64,kernelSize:1}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.conv2d({filters:128,kernelSize:1}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.conv2d({filters:1024,kernelSize:1}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.maxPool2d({poolSize:[2048,1],strides:1}),a.layers.flatten(),a.layers.dense({units:512}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.dropout({rate:.3}),a.layers.dense({units:256}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.dropout({rate:.3}),a.layers.dense({units:e.length}),a.layers.batchNormalization(),a.layers.activation({activation:"softmax"})]}),this.model.summary(),this.model.compile({optimizer:a.train.adam(),loss:"categoricalCrossentropy",metrics:["accuracy"]}),[2]}}))}))},e.prototype.train=function(){return i(this,void 0,void 0,(function(){var e,t;return r(this,(function(n){switch(n.label){case 0:return this.model?[4,s.show.modelSummary({name:"Model Architecture"},this.model)]:[2];case 1:return n.sent(),e=["loss","val_loss","acc","val_acc"],t=s.show.fitCallbacks({name:"Model Training"},e),[2,this.model.fitDataset(o.trainDataset,{epochs:1,callbacks:[t,{onBatchEnd:function(){return i(this,void 0,void 0,(function(){var e;return r(this,(function(t){return e=a.memory(),console.log("numTensors: "+e.numTensors),[2]}))}))}}]})]}}))}))},e}();!function(){i(this,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return[4,a.setBackend("webgl")];case 1:return t.sent()?[4,(e=new l).init()]:[3,3];case 2:t.sent(),e.train(),t.label=3;case 3:return[2]}}))}))}()},107:function(e,t){},108:function(e,t){},109:function(e,t){},110:function(e,t){},111:function(e,t){},112:function(e,t){},271:function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(r,a){function s(e){try{l(i.next(e))}catch(e){a(e)}}function o(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}l((i=i.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,i,r,a,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(r=(r=s.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}},a=this&&this.__await||function(e){return this instanceof a?(this.v=e,this):new a(e)},s=this&&this.__asyncGenerator||function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,r=n.apply(e,t||[]),s=[];return i={},o("next"),o("throw"),o("return"),i[Symbol.asyncIterator]=function(){return this},i;function o(e){r[e]&&(i[e]=function(t){return new Promise((function(n,i){s.push([e,t,n,i])>1||l(e,t)}))})}function l(e,t){try{(n=r[e](t)).value instanceof a?Promise.resolve(n.value.v).then(h,_):d(s[0][2],n)}catch(e){d(s[0][3],e)}var n}function h(e){l("next",e)}function _(e){l("throw",e)}function d(e,t){e(t),s.shift(),s.length&&l(s[0][0],s[0][1])}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(273),l=n(32),h="http://10.6.96.143:2048";function _(e){var t=this;return new Promise((function(n,a){fetch([h,e].join("/")).then((function(e){return i(t,void 0,void 0,(function(){var t,i;return r(this,(function(r){switch(r.label){case 0:return[4,e.text()];case 1:return t=r.sent(),i=t.split("\n").filter((function(e){return e})),n(i),[2]}}))}))})).catch((function(e){return a(e)}))}))}t.loadCategories=function(){return i(this,void 0,void 0,(function(){var e=this;return r(this,(function(t){return[2,new Promise((function(t,n){fetch([h,"shape_names.txt"].join("/")).then((function(n){return i(e,void 0,void 0,(function(){var e,i;return r(this,(function(r){switch(r.label){case 0:return[4,n.text()];case 1:return e=r.sent(),i=e.split("\n").filter((function(e){return e})),t(i),[2]}}))}))})).catch((function(e){return n(e)}))}))]}))}))},t.trainDataset=l.data.generator((function(){return function(e,t){return s(this,arguments,(function(){var n,i,s,d,f,u,c,p,g,m;return r(this,(function(v){switch(v.label){case 0:return[4,a(_(e))];case 1:n=v.sent(),i=0,s=n,v.label=2;case 2:return i<s.length?(d=s[i],[4,a((b=[h,d].join("/"),new Promise((function(e,t){fetch(b).then((function(e){return e.arrayBuffer()})).then((function(t){var n=new o.File(t,"ply_data_train0.h5"),i=n.get("data").value,r=n.get("label").value;e({data:i,label:r})})).catch((function(e){return t(e)}))}))))]):[3,8];case 3:f=v.sent(),u=f.data,c=f.label,p=Math.ceil(c.length/t),g=function(e){var n,i,s,o;return r(this,(function(r){switch(r.label){case 0:return i=(n=e*t)+t,s=u.slice(2048*n*3,2048*i*3),o=c.slice(n,i),[4,a(l.tidy((function(){return{xs:l.tensor(s,[s.length/2048/3,2048,3,1],"float32"),ys:l.oneHot(l.tensor1d(o,"int32"),40)}})))];case 1:return[4,r.sent()];case 2:return r.sent(),[2]}}))},m=0,v.label=4;case 4:return m<p?[5,g(m)]:[3,7];case 5:v.sent(),v.label=6;case 6:return++m,[3,4];case 7:return i++,[3,2];case 8:return[2]}var b}))}))}("train_files.txt",32)}))},273:function(e,t,n){"use strict";n.r(t);var i={};function r(e,t,n=0){for(var i="<"+Array.from(e.values()).join(""),r=_.unpack_from(i,t,n),a=Array.from(e.keys()),s=new Map,o=0;o<a.length;o++)s.set(a[o],r[o]);return s}function a(e){e||e()}function s(e){var t="<"+Array.from(e.values()).join("");return _.calcsize(t)}function o(e,t=8){return Math.ceil(e/t)*t}n.r(i),n.d(i,"__version__",(function(){return Qr})),n.d(i,"Group",(function(){return Lr})),n.d(i,"File",(function(){return Dr})),n.d(i,"Dataset",(function(){return Pr}));var l={u:"Uint",i:"Int",f:"Float"};function h(e){var t,n,i=_._is_big_endian(e);if(/S/.test(e))t="getString",n=0|((e.match(/S(\d*)/)||[])[1]||1);else{let[i,r,a]=e.match(/[<>=!@]?(i|u|f)(\d*)/),s=8*(n=parseInt(a||4,10));t="get"+l[r]+s.toFixed()}return[t,i,n]}const _=new class{constructor(){this.big_endian=function(){const e=new Uint8Array(4);return!((new Uint32Array(e.buffer)[0]=1)&e[0])}(),this.getters={s:"getUint8",b:"getInt8",B:"getUint8",h:"getInt16",H:"getUint16",i:"getInt32",I:"getUint32",l:"getInt32",L:"getUint32",q:"getInt64",Q:"getUint64",f:"getFloat32",d:"getFloat64"},this.byte_lengths={s:1,b:1,B:1,h:2,H:2,i:4,I:4,l:4,L:4,q:8,Q:8,f:4,d:8};let e=Object.keys(this.byte_lengths).join("");this.fmt_size_regex="(\\d*)(["+e+"])"}calcsize(e){for(var t,n=0,i=new RegExp(this.fmt_size_regex,"g");null!==(t=i.exec(e));){let e=parseInt(t[1]||1,10),i=t[2];n+=e*this.byte_lengths[i]}return n}_is_big_endian(e){return!/^</.test(e)&&(!!/^(!|>)/.test(e)||this.big_endian)}unpack_from(e,t,n){n=n||0;for(var i,r=new f(t,0),a=[],s=this._is_big_endian(e),o=new RegExp(this.fmt_size_regex,"g");null!==(i=o.exec(e));){let e=parseInt(i[1]||1,10),t=i[2],o=this.getters[t],d=this.byte_lengths[t];var l;if("s"==t){var h=new Array;l=h}else l=a;for(var _=0;_<e;_++)l.push(r[o](n,!s)),n+=d;"s"==t&&a.push(h.reduce((function(e,t){return e+String.fromCharCode(t)}),""))}return a}};var d=!1;class f extends DataView{getUint64(e,t){const n=this.getUint32(e,t),i=this.getUint32(e+4,t),r=t?n+2**32*i:2**32*n+i;return d&&!Number.isSafeInteger(r)&&console.warn(r,"exceeds MAX_SAFE_INTEGER. Precision may be lost"),r}getInt64(e,t){var n,i;t?(n=this.getUint32(e,!0),i=this.getInt32(e+4,!0)):(i=this.getInt32(e,!1),n=this.getUint32(e+4,!1));const r=n+4294967296*i;return d&&!Number.isSafeInteger(r)&&console.warn(r,"exceeds MAX_SAFE_INTEGER or MIN_SAFE_INTEGER. Precision may be lost"),r}getString(e,t,n){for(var i="",r=0;r<n;r++){let t=this.getUint8(e+r);t&&(i+=String.fromCharCode(t))}return decodeURIComponent(escape(i))}getVLENStruct(e,t,n){return[this.getUint32(e,t),this.getUint64(e+4,t),this.getUint32(e+12,t)]}generate_getFixedString(e){return function(t,n){for(var i="",r=0;r<e;r++)i+=String.fromCharCode(this.getUint8(offset));return i}.bind(this)}}new Map([["item_size","I"],["collection_address","Q"],["object_index","I"]]);class u{constructor(e,t){this.buf=e,this.offset=t,this.dtype=this.determine_dtype()}determine_dtype(){let e=r(c,this.buf,this.offset);this.offset+=p;let t=15&e.get("class_and_version");if(t==g)return this._determine_dtype_fixed_point(e);if(t==m)return this._determine_dtype_floating_point(e);if(t==v)throw"Time datatype class not supported.";if(t==b)return this._determine_dtype_string(e);if(t==w)throw"Bitfield datatype class not supported.";if(t==k)throw"Opaque datatype class not supported.";if(t==y)return this._determine_dtype_compound(e);if(t==x)return["REFERENCE",e.get("size")];if(t==z)throw"Enumerated datatype class not supported.";if(t==B)throw"Array datatype class not supported.";if(t==E){let t=this._determine_dtype_vlen(e);if("VLEN_SEQUENCE"==t[0]){t=["VLEN_SEQUENCE",this.determine_dtype()]}return t}throw"Invalid datatype class "+t}_determine_dtype_fixed_point(e){let t=e.get("size");if(![1,2,4,8].includes(t))throw"Unsupported datatype size";var n;var i;return n=(8&e.get("class_bit_field_0"))>0?"i":"u",i=0==(1&e.get("class_bit_field_0"))?"<":">",this.offset+=4,i+n+t.toFixed()}_determine_dtype_floating_point(e){let t=e.get("size");if(![1,2,4,8].includes(t))throw"Unsupported datatype size";var n;return n=0==(1&e.get("class_bit_field_0"))?"<":">",this.offset+=12,n+"f"+t.toFixed()}_determine_dtype_string(e){return"S"+e.get("size").toFixed()}_determine_dtype_vlen(e){return 1!=(1&e.get("class_bit_field_0"))?["VLEN_SEQUENCE",0,0]:["VLEN_STRING",e.get("class_bit_field_0")>>4,1&e.get("class_bit_field_1")]}_determine_dtype_compound(e){throw"not yet implemented!"}}var c=new Map([["class_and_version","B"],["class_bit_field_0","B"],["class_bit_field_1","B"],["class_bit_field_2","B"],["size","I"]]),p=s(c),g=(s(new Map([["offset","I"],["dimensionality","B"],["reserved_0","B"],["reserved_1","B"],["reserved_2","B"],["permutation","I"],["reserved_3","I"],["dim_size_1","I"],["dim_size_2","I"],["dim_size_3","I"],["dim_size_4","I"]])),0),m=1,v=2,b=3,w=4,k=5,y=6,x=7,z=8,E=9,B=10,I="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function S(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function A(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var i in n)S(n,i)&&(e[i]=n[i])}}return e}function N(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)}var j={arraySet:function(e,t,n,i,r){for(var a=0;a<i;a++)e[r+a]=t[n+a]},flattenChunks:function(e){return[].concat.apply([],e)}};const U={};I?A(U,{arraySet:function(e,t,n,i,r){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+i),r);else for(var a=0;a<i;a++)e[r+a]=t[n+a]},flattenChunks:function(e){var t,n,i,r,a,s;for(i=0,t=0,n=e.length;t<n;t++)i+=e[t].length;for(s=new Uint8Array(i),r=0,t=0,n=e.length;t<n;t++)a=e[t],s.set(a,r),r+=a.length;return s}},{Buf8:Uint8Array,Buf16:Uint16Array,Buf32:Int32Array}):A(U,j,{Buf8:Array,Buf16:Array,Buf32:Array});let F=U.Buf8,R=U.Buf16,C=U.Buf32,M=U.arraySet,O=U.flattenChunks;var H=4,Z=0,Q=1,L=2;function T(e){for(var t=e.length;--t>=0;)e[t]=0}var D=0,P=1,V=2,G=29,K=256,Y=K+1+G,X=30,q=19,$=2*Y+1,J=15,W=16,ee=7,te=256,ne=16,ie=17,re=18,ae=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],se=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],oe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],le=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],he=new Array(2*(Y+2));T(he);var _e=new Array(2*X);T(_e);var de=new Array(512);T(de);var fe=new Array(256);T(fe);var ue=new Array(G);T(ue);var ce,pe,ge,me=new Array(X);function ve(e,t,n,i,r){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=i,this.max_length=r,this.has_stree=e&&e.length}function be(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function we(e){return e<256?de[e]:de[256+(e>>>7)]}function ke(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function ye(e,t,n){e.bi_valid>W-n?(e.bi_buf|=t<<e.bi_valid&65535,ke(e,e.bi_buf),e.bi_buf=t>>W-e.bi_valid,e.bi_valid+=n-W):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function xe(e,t,n){ye(e,n[2*t],n[2*t+1])}function ze(e,t){var n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}function Ee(e,t,n){var i,r,a=new Array(J+1),s=0;for(i=1;i<=J;i++)a[i]=s=s+n[i-1]<<1;for(r=0;r<=t;r++){var o=e[2*r+1];0!==o&&(e[2*r]=ze(a[o]++,o))}}function Be(e){var t;for(t=0;t<Y;t++)e.dyn_ltree[2*t]=0;for(t=0;t<X;t++)e.dyn_dtree[2*t]=0;for(t=0;t<q;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*te]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function Ie(e){e.bi_valid>8?ke(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function Se(e,t,n,i){var r=2*t,a=2*n;return e[r]<e[a]||e[r]===e[a]&&i[t]<=i[n]}function Ae(e,t,n){for(var i=e.heap[n],r=n<<1;r<=e.heap_len&&(r<e.heap_len&&Se(t,e.heap[r+1],e.heap[r],e.depth)&&r++,!Se(t,i,e.heap[r],e.depth));)e.heap[n]=e.heap[r],n=r,r<<=1;e.heap[n]=i}function Ne(e,t,n){var i,r,a,s,o=0;if(0!==e.last_lit)do{i=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],r=e.pending_buf[e.l_buf+o],o++,0===i?xe(e,r,t):(xe(e,(a=fe[r])+K+1,t),0!==(s=ae[a])&&ye(e,r-=ue[a],s),xe(e,a=we(--i),n),0!==(s=se[a])&&ye(e,i-=me[a],s))}while(o<e.last_lit);xe(e,te,t)}function je(e,t){var n,i,r,a=t.dyn_tree,s=t.stat_desc.static_tree,o=t.stat_desc.has_stree,l=t.stat_desc.elems,h=-1;for(e.heap_len=0,e.heap_max=$,n=0;n<l;n++)0!==a[2*n]?(e.heap[++e.heap_len]=h=n,e.depth[n]=0):a[2*n+1]=0;for(;e.heap_len<2;)a[2*(r=e.heap[++e.heap_len]=h<2?++h:0)]=1,e.depth[r]=0,e.opt_len--,o&&(e.static_len-=s[2*r+1]);for(t.max_code=h,n=e.heap_len>>1;n>=1;n--)Ae(e,a,n);r=l;do{n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Ae(e,a,1),i=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=i,a[2*r]=a[2*n]+a[2*i],e.depth[r]=(e.depth[n]>=e.depth[i]?e.depth[n]:e.depth[i])+1,a[2*n+1]=a[2*i+1]=r,e.heap[1]=r++,Ae(e,a,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var n,i,r,a,s,o,l=t.dyn_tree,h=t.max_code,_=t.stat_desc.static_tree,d=t.stat_desc.has_stree,f=t.stat_desc.extra_bits,u=t.stat_desc.extra_base,c=t.stat_desc.max_length,p=0;for(a=0;a<=J;a++)e.bl_count[a]=0;for(l[2*e.heap[e.heap_max]+1]=0,n=e.heap_max+1;n<$;n++)(a=l[2*l[2*(i=e.heap[n])+1]+1]+1)>c&&(a=c,p++),l[2*i+1]=a,i>h||(e.bl_count[a]++,s=0,i>=u&&(s=f[i-u]),o=l[2*i],e.opt_len+=o*(a+s),d&&(e.static_len+=o*(_[2*i+1]+s)));if(0!==p){do{for(a=c-1;0===e.bl_count[a];)a--;e.bl_count[a]--,e.bl_count[a+1]+=2,e.bl_count[c]--,p-=2}while(p>0);for(a=c;0!==a;a--)for(i=e.bl_count[a];0!==i;)(r=e.heap[--n])>h||(l[2*r+1]!==a&&(e.opt_len+=(a-l[2*r+1])*l[2*r],l[2*r+1]=a),i--)}}(e,t),Ee(a,h,e.bl_count)}function Ue(e,t,n){var i,r,a=-1,s=t[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),t[2*(n+1)+1]=65535,i=0;i<=n;i++)r=s,s=t[2*(i+1)+1],++o<l&&r===s||(o<h?e.bl_tree[2*r]+=o:0!==r?(r!==a&&e.bl_tree[2*r]++,e.bl_tree[2*ne]++):o<=10?e.bl_tree[2*ie]++:e.bl_tree[2*re]++,o=0,a=r,0===s?(l=138,h=3):r===s?(l=6,h=3):(l=7,h=4))}function Fe(e,t,n){var i,r,a=-1,s=t[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),i=0;i<=n;i++)if(r=s,s=t[2*(i+1)+1],!(++o<l&&r===s)){if(o<h)do{xe(e,r,e.bl_tree)}while(0!=--o);else 0!==r?(r!==a&&(xe(e,r,e.bl_tree),o--),xe(e,ne,e.bl_tree),ye(e,o-3,2)):o<=10?(xe(e,ie,e.bl_tree),ye(e,o-3,3)):(xe(e,re,e.bl_tree),ye(e,o-11,7));o=0,a=r,0===s?(l=138,h=3):r===s?(l=6,h=3):(l=7,h=4)}}T(me);var Re=!1;function Ce(e){Re||(!function(){var e,t,n,i,r,a=new Array(J+1);for(n=0,i=0;i<G-1;i++)for(ue[i]=n,e=0;e<1<<ae[i];e++)fe[n++]=i;for(fe[n-1]=i,r=0,i=0;i<16;i++)for(me[i]=r,e=0;e<1<<se[i];e++)de[r++]=i;for(r>>=7;i<X;i++)for(me[i]=r<<7,e=0;e<1<<se[i]-7;e++)de[256+r++]=i;for(t=0;t<=J;t++)a[t]=0;for(e=0;e<=143;)he[2*e+1]=8,e++,a[8]++;for(;e<=255;)he[2*e+1]=9,e++,a[9]++;for(;e<=279;)he[2*e+1]=7,e++,a[7]++;for(;e<=287;)he[2*e+1]=8,e++,a[8]++;for(Ee(he,Y+1,a),e=0;e<X;e++)_e[2*e+1]=5,_e[2*e]=ze(e,5);ce=new ve(he,ae,K+1,Y,J),pe=new ve(_e,se,0,X,J),ge=new ve(new Array(0),oe,0,q,ee)}(),Re=!0),e.l_desc=new be(e.dyn_ltree,ce),e.d_desc=new be(e.dyn_dtree,pe),e.bl_desc=new be(e.bl_tree,ge),e.bi_buf=0,e.bi_valid=0,Be(e)}function Me(e,t,n,i){ye(e,(D<<1)+(i?1:0),3),function(e,t,n,i){Ie(e),i&&(ke(e,n),ke(e,~n)),M(e.pending_buf,e.window,t,n,e.pending),e.pending+=n}(e,t,n,!0)}function Oe(e){ye(e,P<<1,3),xe(e,te,he),function(e){16===e.bi_valid?(ke(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}function He(e,t,n,i){var r,a,s=0;e.level>0?(e.strm.data_type===L&&(e.strm.data_type=function(e){var t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return Z;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return Q;for(t=32;t<K;t++)if(0!==e.dyn_ltree[2*t])return Q;return Z}(e)),je(e,e.l_desc),je(e,e.d_desc),s=function(e){var t;for(Ue(e,e.dyn_ltree,e.l_desc.max_code),Ue(e,e.dyn_dtree,e.d_desc.max_code),je(e,e.bl_desc),t=q-1;t>=3&&0===e.bl_tree[2*le[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),r=e.opt_len+3+7>>>3,(a=e.static_len+3+7>>>3)<=r&&(r=a)):r=a=n+5,n+4<=r&&-1!==t?Me(e,t,n,i):e.strategy===H||a===r?(ye(e,(P<<1)+(i?1:0),3),Ne(e,he,_e)):(ye(e,(V<<1)+(i?1:0),3),function(e,t,n,i){var r;for(ye(e,t-257,5),ye(e,n-1,5),ye(e,i-4,4),r=0;r<i;r++)ye(e,e.bl_tree[2*le[r]+1],3);Fe(e,e.dyn_ltree,t-1),Fe(e,e.dyn_dtree,n-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),Ne(e,e.dyn_ltree,e.dyn_dtree)),Be(e),i&&Ie(e)}function Ze(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(fe[n]+K+1)]++,e.dyn_dtree[2*we(t)]++),e.last_lit===e.lit_bufsize-1}function Qe(e,t,n,i){for(var r=65535&e|0,a=e>>>16&65535|0,s=0;0!==n;){n-=s=n>2e3?2e3:n;do{a=a+(r=r+t[i++]|0)|0}while(--s);r%=65521,a%=65521}return r|a<<16|0}var Le=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var i=0;i<8;i++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();function Te(e,t,n,i){var r=Le,a=i+n;e^=-1;for(var s=i;s<a;s++)e=e>>>8^r[255&(e^t[s])];return-1^e}var De,Pe={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Ve=0,Ge=1,Ke=3,Ye=4,Xe=5,qe=0,$e=1,Je=-2,We=-3,et=-5,tt=-1,nt=1,it=2,rt=3,at=4,st=2,ot=8,lt=9,ht=286,_t=30,dt=19,ft=2*ht+1,ut=15,ct=3,pt=258,gt=pt+ct+1,mt=32,vt=42,bt=69,wt=73,kt=91,yt=103,xt=113,zt=666,Et=1,Bt=2,It=3,St=4,At=3;function Nt(e,t){return e.msg=Pe[t],t}function jt(e){return(e<<1)-(e>4?9:0)}function Ut(e){for(var t=e.length;--t>=0;)e[t]=0}function Ft(e){var t=e.state,n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(M(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function Rt(e,t){He(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,Ft(e.strm)}function Ct(e,t){e.pending_buf[e.pending++]=t}function Mt(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function Ot(e,t){var n,i,r=e.max_chain_length,a=e.strstart,s=e.prev_length,o=e.nice_match,l=e.strstart>e.w_size-gt?e.strstart-(e.w_size-gt):0,h=e.window,_=e.w_mask,d=e.prev,f=e.strstart+pt,u=h[a+s-1],c=h[a+s];e.prev_length>=e.good_match&&(r>>=2),o>e.lookahead&&(o=e.lookahead);do{if(h[(n=t)+s]===c&&h[n+s-1]===u&&h[n]===h[a]&&h[++n]===h[a+1]){a+=2,n++;do{}while(h[++a]===h[++n]&&h[++a]===h[++n]&&h[++a]===h[++n]&&h[++a]===h[++n]&&h[++a]===h[++n]&&h[++a]===h[++n]&&h[++a]===h[++n]&&h[++a]===h[++n]&&a<f);if(i=pt-(f-a),a=f-pt,i>s){if(e.match_start=t,s=i,i>=o)break;u=h[a+s-1],c=h[a+s]}}}while((t=d[t&_])>l&&0!=--r);return s<=e.lookahead?s:e.lookahead}function Ht(e){var t,n,i,r,a,s,o,l,h,_,d=e.w_size;do{if(r=e.window_size-e.lookahead-e.strstart,e.strstart>=d+(d-gt)){M(e.window,e.window,d,d,0),e.match_start-=d,e.strstart-=d,e.block_start-=d,t=n=e.hash_size;do{i=e.head[--t],e.head[t]=i>=d?i-d:0}while(--n);t=n=d;do{i=e.prev[--t],e.prev[t]=i>=d?i-d:0}while(--n);r+=d}if(0===e.strm.avail_in)break;if(s=e.strm,o=e.window,l=e.strstart+e.lookahead,h=r,_=void 0,(_=s.avail_in)>h&&(_=h),n=0===_?0:(s.avail_in-=_,M(o,s.input,s.next_in,_,l),1===s.state.wrap?s.adler=Qe(s.adler,o,_,l):2===s.state.wrap&&(s.adler=Te(s.adler,o,_,l)),s.next_in+=_,s.total_in+=_,_),e.lookahead+=n,e.lookahead+e.insert>=ct)for(a=e.strstart-e.insert,e.ins_h=e.window[a],e.ins_h=(e.ins_h<<e.hash_shift^e.window[a+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[a+ct-1])&e.hash_mask,e.prev[a&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=a,a++,e.insert--,!(e.lookahead+e.insert<ct)););}while(e.lookahead<gt&&0!==e.strm.avail_in)}function Zt(e,t){for(var n,i;;){if(e.lookahead<gt){if(Ht(e),e.lookahead<gt&&t===Ve)return Et;if(0===e.lookahead)break}if(n=0,e.lookahead>=ct&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+ct-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-gt&&(e.match_length=Ot(e,n)),e.match_length>=ct)if(i=Ze(e,e.strstart-e.match_start,e.match_length-ct),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=ct){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+ct-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else i=Ze(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(i&&(Rt(e,!1),0===e.strm.avail_out))return Et}return e.insert=e.strstart<ct-1?e.strstart:ct-1,t===Ye?(Rt(e,!0),0===e.strm.avail_out?It:St):e.last_lit&&(Rt(e,!1),0===e.strm.avail_out)?Et:Bt}function Qt(e,t){for(var n,i,r;;){if(e.lookahead<gt){if(Ht(e),e.lookahead<gt&&t===Ve)return Et;if(0===e.lookahead)break}if(n=0,e.lookahead>=ct&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+ct-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=ct-1,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-gt&&(e.match_length=Ot(e,n),e.match_length<=5&&(e.strategy===nt||e.match_length===ct&&e.strstart-e.match_start>4096)&&(e.match_length=ct-1)),e.prev_length>=ct&&e.match_length<=e.prev_length){r=e.strstart+e.lookahead-ct,i=Ze(e,e.strstart-1-e.prev_match,e.prev_length-ct),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=r&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+ct-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=ct-1,e.strstart++,i&&(Rt(e,!1),0===e.strm.avail_out))return Et}else if(e.match_available){if((i=Ze(e,0,e.window[e.strstart-1]))&&Rt(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return Et}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(i=Ze(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<ct-1?e.strstart:ct-1,t===Ye?(Rt(e,!0),0===e.strm.avail_out?It:St):e.last_lit&&(Rt(e,!1),0===e.strm.avail_out)?Et:Bt}function Lt(e,t,n,i,r){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=i,this.func=r}function Tt(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ot,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new R(2*ft),this.dyn_dtree=new R(2*(2*_t+1)),this.bl_tree=new R(2*(2*dt+1)),Ut(this.dyn_ltree),Ut(this.dyn_dtree),Ut(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new R(ut+1),this.heap=new R(2*ht+1),Ut(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new R(2*ht+1),Ut(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Dt(e){var t,n=function(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=st,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?vt:xt,e.adler=2===t.wrap?0:1,t.last_flush=Ve,Ce(t),qe):Nt(e,Je)}(e);return n===qe&&((t=e.state).window_size=2*t.w_size,Ut(t.head),t.max_lazy_match=De[t.level].max_lazy,t.good_match=De[t.level].good_length,t.nice_match=De[t.level].nice_length,t.max_chain_length=De[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ct-1,t.match_available=0,t.ins_h=0),n}function Pt(e,t){var n,i,r,a;if(!e||!e.state||t>Xe||t<0)return e?Nt(e,Je):Je;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||i.status===zt&&t!==Ye)return Nt(e,0===e.avail_out?et:Je);if(i.strm=e,n=i.last_flush,i.last_flush=t,i.status===vt)if(2===i.wrap)e.adler=0,Ct(i,31),Ct(i,139),Ct(i,8),i.gzhead?(Ct(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),Ct(i,255&i.gzhead.time),Ct(i,i.gzhead.time>>8&255),Ct(i,i.gzhead.time>>16&255),Ct(i,i.gzhead.time>>24&255),Ct(i,9===i.level?2:i.strategy>=it||i.level<2?4:0),Ct(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(Ct(i,255&i.gzhead.extra.length),Ct(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=Te(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=bt):(Ct(i,0),Ct(i,0),Ct(i,0),Ct(i,0),Ct(i,0),Ct(i,9===i.level?2:i.strategy>=it||i.level<2?4:0),Ct(i,At),i.status=xt);else{var s=ot+(i.w_bits-8<<4)<<8;s|=(i.strategy>=it||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(s|=mt),s+=31-s%31,i.status=xt,Mt(i,s),0!==i.strstart&&(Mt(i,e.adler>>>16),Mt(i,65535&e.adler)),e.adler=1}if(i.status===bt)if(i.gzhead.extra){for(r=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>r&&(e.adler=Te(e.adler,i.pending_buf,i.pending-r,r)),Ft(e),r=i.pending,i.pending!==i.pending_buf_size));)Ct(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>r&&(e.adler=Te(e.adler,i.pending_buf,i.pending-r,r)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=wt)}else i.status=wt;if(i.status===wt)if(i.gzhead.name){r=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>r&&(e.adler=Te(e.adler,i.pending_buf,i.pending-r,r)),Ft(e),r=i.pending,i.pending===i.pending_buf_size)){a=1;break}a=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,Ct(i,a)}while(0!==a);i.gzhead.hcrc&&i.pending>r&&(e.adler=Te(e.adler,i.pending_buf,i.pending-r,r)),0===a&&(i.gzindex=0,i.status=kt)}else i.status=kt;if(i.status===kt)if(i.gzhead.comment){r=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>r&&(e.adler=Te(e.adler,i.pending_buf,i.pending-r,r)),Ft(e),r=i.pending,i.pending===i.pending_buf_size)){a=1;break}a=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,Ct(i,a)}while(0!==a);i.gzhead.hcrc&&i.pending>r&&(e.adler=Te(e.adler,i.pending_buf,i.pending-r,r)),0===a&&(i.status=yt)}else i.status=yt;if(i.status===yt&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&Ft(e),i.pending+2<=i.pending_buf_size&&(Ct(i,255&e.adler),Ct(i,e.adler>>8&255),e.adler=0,i.status=xt)):i.status=xt),0!==i.pending){if(Ft(e),0===e.avail_out)return i.last_flush=-1,qe}else if(0===e.avail_in&&jt(t)<=jt(n)&&t!==Ye)return Nt(e,et);if(i.status===zt&&0!==e.avail_in)return Nt(e,et);if(0!==e.avail_in||0!==i.lookahead||t!==Ve&&i.status!==zt){var o=i.strategy===it?function(e,t){for(var n;;){if(0===e.lookahead&&(Ht(e),0===e.lookahead)){if(t===Ve)return Et;break}if(e.match_length=0,n=Ze(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(Rt(e,!1),0===e.strm.avail_out))return Et}return e.insert=0,t===Ye?(Rt(e,!0),0===e.strm.avail_out?It:St):e.last_lit&&(Rt(e,!1),0===e.strm.avail_out)?Et:Bt}(i,t):i.strategy===rt?function(e,t){for(var n,i,r,a,s=e.window;;){if(e.lookahead<=pt){if(Ht(e),e.lookahead<=pt&&t===Ve)return Et;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=ct&&e.strstart>0&&(i=s[r=e.strstart-1])===s[++r]&&i===s[++r]&&i===s[++r]){a=e.strstart+pt;do{}while(i===s[++r]&&i===s[++r]&&i===s[++r]&&i===s[++r]&&i===s[++r]&&i===s[++r]&&i===s[++r]&&i===s[++r]&&r<a);e.match_length=pt-(a-r),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=ct?(n=Ze(e,1,e.match_length-ct),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=Ze(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(Rt(e,!1),0===e.strm.avail_out))return Et}return e.insert=0,t===Ye?(Rt(e,!0),0===e.strm.avail_out?It:St):e.last_lit&&(Rt(e,!1),0===e.strm.avail_out)?Et:Bt}(i,t):De[i.level].func(i,t);if(o!==It&&o!==St||(i.status=zt),o===Et||o===It)return 0===e.avail_out&&(i.last_flush=-1),qe;if(o===Bt&&(t===Ge?Oe(i):t!==Xe&&(Me(i,0,0,!1),t===Ke&&(Ut(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),Ft(e),0===e.avail_out))return i.last_flush=-1,qe}return t!==Ye?qe:i.wrap<=0?$e:(2===i.wrap?(Ct(i,255&e.adler),Ct(i,e.adler>>8&255),Ct(i,e.adler>>16&255),Ct(i,e.adler>>24&255),Ct(i,255&e.total_in),Ct(i,e.total_in>>8&255),Ct(i,e.total_in>>16&255),Ct(i,e.total_in>>24&255)):(Mt(i,e.adler>>>16),Mt(i,65535&e.adler)),Ft(e),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?qe:$e)}De=[new Lt(0,0,0,0,(function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(Ht(e),0===e.lookahead&&t===Ve)return Et;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var i=e.block_start+n;if((0===e.strstart||e.strstart>=i)&&(e.lookahead=e.strstart-i,e.strstart=i,Rt(e,!1),0===e.strm.avail_out))return Et;if(e.strstart-e.block_start>=e.w_size-gt&&(Rt(e,!1),0===e.strm.avail_out))return Et}return e.insert=0,t===Ye?(Rt(e,!0),0===e.strm.avail_out?It:St):(e.strstart>e.block_start&&(Rt(e,!1),e.strm.avail_out),Et)})),new Lt(4,4,8,4,Zt),new Lt(4,5,16,8,Zt),new Lt(4,6,32,32,Zt),new Lt(4,4,16,16,Qt),new Lt(8,16,32,32,Qt),new Lt(8,16,128,128,Qt),new Lt(8,32,128,256,Qt),new Lt(32,128,258,1024,Qt),new Lt(32,258,258,4096,Qt)];var Vt=!0,Gt=!0;try{String.fromCharCode.apply(null,[0])}catch(e){Vt=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){Gt=!1}for(var Kt=new F(256),Yt=0;Yt<256;Yt++)Kt[Yt]=Yt>=252?6:Yt>=248?5:Yt>=240?4:Yt>=224?3:Yt>=192?2:1;function Xt(e){var t,n,i,r,a,s=e.length,o=0;for(r=0;r<s;r++)55296==(64512&(n=e.charCodeAt(r)))&&r+1<s&&56320==(64512&(i=e.charCodeAt(r+1)))&&(n=65536+(n-55296<<10)+(i-56320),r++),o+=n<128?1:n<2048?2:n<65536?3:4;for(t=new F(o),a=0,r=0;a<o;r++)55296==(64512&(n=e.charCodeAt(r)))&&r+1<s&&56320==(64512&(i=e.charCodeAt(r+1)))&&(n=65536+(n-55296<<10)+(i-56320),r++),n<128?t[a++]=n:n<2048?(t[a++]=192|n>>>6,t[a++]=128|63&n):n<65536?(t[a++]=224|n>>>12,t[a++]=128|n>>>6&63,t[a++]=128|63&n):(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63,t[a++]=128|n>>>6&63,t[a++]=128|63&n);return t}function qt(e,t){if(t<65537&&(e.subarray&&Gt||!e.subarray&&Vt))return String.fromCharCode.apply(null,N(e,t));for(var n="",i=0;i<t;i++)n+=String.fromCharCode(e[i]);return n}function $t(e,t){var n,i,r,a,s=t||e.length,o=new Array(2*s);for(i=0,n=0;n<s;)if((r=e[n++])<128)o[i++]=r;else if((a=Kt[r])>4)o[i++]=65533,n+=a-1;else{for(r&=2===a?31:3===a?15:7;a>1&&n<s;)r=r<<6|63&e[n++],a--;a>1?o[i++]=65533:r<65536?o[i++]=r:(r-=65536,o[i++]=55296|r>>10&1023,o[i++]=56320|1023&r)}return qt(o,i)}function Jt(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;n>=0&&128==(192&e[n]);)n--;return n<0?t:0===n?t:n+Kt[e[n]]>t?n:t}function Wt(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}Kt[254]=Kt[254]=1;var en=Object.prototype.toString,tn=0,nn=-1,rn=0,an=8;function sn(e){if(!(this instanceof sn))return new sn(e);this.options=A({level:nn,method:an,chunkSize:16384,windowBits:15,memLevel:8,strategy:rn,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Wt,this.strm.avail_out=0;var n,i,r=function(e,t,n,i,r,a){if(!e)return Je;var s=1;if(t===tt&&(t=6),i<0?(s=0,i=-i):i>15&&(s=2,i-=16),r<1||r>lt||n!==ot||i<8||i>15||t<0||t>9||a<0||a>at)return Nt(e,Je);8===i&&(i=9);var o=new Tt;return e.state=o,o.strm=e,o.wrap=s,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=r+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+ct-1)/ct),o.window=new F(2*o.w_size),o.head=new R(o.hash_size),o.prev=new R(o.w_size),o.lit_bufsize=1<<r+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new F(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=a,o.method=n,Dt(e)}(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==tn)throw new Error(Pe[r]);if(t.header&&(n=this.strm,i=t.header,n&&n.state&&(2!==n.state.wrap||(n.state.gzhead=i))),t.dictionary){var a;if(a="string"==typeof t.dictionary?Xt(t.dictionary):"[object ArrayBuffer]"===en.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=function(e,t){var n,i,r,a,s,o,l,h,_=t.length;if(!e||!e.state)return Je;if(2===(a=(n=e.state).wrap)||1===a&&n.status!==vt||n.lookahead)return Je;for(1===a&&(e.adler=Qe(e.adler,t,_,0)),n.wrap=0,_>=n.w_size&&(0===a&&(Ut(n.head),n.strstart=0,n.block_start=0,n.insert=0),h=new F(n.w_size),M(h,t,_-n.w_size,n.w_size,0),t=h,_=n.w_size),s=e.avail_in,o=e.next_in,l=e.input,e.avail_in=_,e.next_in=0,e.input=t,Ht(n);n.lookahead>=ct;){i=n.strstart,r=n.lookahead-(ct-1);do{n.ins_h=(n.ins_h<<n.hash_shift^n.window[i+ct-1])&n.hash_mask,n.prev[i&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=i,i++}while(--r);n.strstart=i,n.lookahead=ct-1,Ht(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=ct-1,n.match_available=0,e.next_in=o,e.input=l,e.avail_in=s,n.wrap=a,qe}(this.strm,a))!==tn)throw new Error(Pe[r]);this._dict_set=!0}}function on(e,t){var n=new sn(t);if(n.push(e,!0),n.err)throw n.msg||Pe[n.err];return n.result}sn.prototype.push=function(e,t){var n,i,r,a=this.strm,s=this.options.chunkSize;if(this.ended)return!1;i=t===~~t?t:!0===t?4:0,"string"==typeof e?a.input=Xt(e):"[object ArrayBuffer]"===en.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new F(s),a.next_out=0,a.avail_out=s),1!==(n=Pt(a,i))&&n!==tn)return this.onEnd(n),this.ended=!0,!1;0!==a.avail_out&&(0!==a.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(qt(r=N(a.output,a.next_out),r.length)):this.onData(N(a.output,a.next_out)))}while((a.avail_in>0||0===a.avail_out)&&1!==n);return 4===i?(n=function(e){var t;return e&&e.state?(t=e.state.status)!==vt&&t!==bt&&t!==wt&&t!==kt&&t!==yt&&t!==xt&&t!==zt?Nt(e,Je):(e.state=null,t===xt?Nt(e,We):qe):Je}(this.strm),this.onEnd(n),this.ended=!0,n===tn):2!==i||(this.onEnd(tn),a.avail_out=0,!0)},sn.prototype.onData=function(e){this.chunks.push(e)},sn.prototype.onEnd=function(e){e===tn&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=O(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var ln=Object.freeze({Deflate:sn,deflate:on,deflateRaw:function(e,t){return(t=t||{}).raw=!0,on(e,t)},gzip:function(e,t){return(t=t||{}).gzip=!0,on(e,t)}}),hn=30,_n=12;function dn(e,t){var n,i,r,a,s,o,l,h,_,d,f,u,c,p,g,m,v,b,w,k,y,x,z,E,B;n=e.state,i=e.next_in,E=e.input,r=i+(e.avail_in-5),a=e.next_out,B=e.output,s=a-(t-e.avail_out),o=a+(e.avail_out-257),l=n.dmax,h=n.wsize,_=n.whave,d=n.wnext,f=n.window,u=n.hold,c=n.bits,p=n.lencode,g=n.distcode,m=(1<<n.lenbits)-1,v=(1<<n.distbits)-1;e:do{c<15&&(u+=E[i++]<<c,c+=8,u+=E[i++]<<c,c+=8),b=p[u&m];t:for(;;){if(u>>>=w=b>>>24,c-=w,0===(w=b>>>16&255))B[a++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=p[(65535&b)+(u&(1<<w)-1)];continue t}if(32&w){n.mode=_n;break e}e.msg="invalid literal/length code",n.mode=hn;break e}k=65535&b,(w&=15)&&(c<w&&(u+=E[i++]<<c,c+=8),k+=u&(1<<w)-1,u>>>=w,c-=w),c<15&&(u+=E[i++]<<c,c+=8,u+=E[i++]<<c,c+=8),b=g[u&v];n:for(;;){if(u>>>=w=b>>>24,c-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=g[(65535&b)+(u&(1<<w)-1)];continue n}e.msg="invalid distance code",n.mode=hn;break e}if(y=65535&b,c<(w&=15)&&(u+=E[i++]<<c,(c+=8)<w&&(u+=E[i++]<<c,c+=8)),(y+=u&(1<<w)-1)>l){e.msg="invalid distance too far back",n.mode=hn;break e}if(u>>>=w,c-=w,y>(w=a-s)){if((w=y-w)>_&&n.sane){e.msg="invalid distance too far back",n.mode=hn;break e}if(x=0,z=f,0===d){if(x+=h-w,w<k){k-=w;do{B[a++]=f[x++]}while(--w);x=a-y,z=B}}else if(d<w){if(x+=h+d-w,(w-=d)<k){k-=w;do{B[a++]=f[x++]}while(--w);if(x=0,d<k){k-=w=d;do{B[a++]=f[x++]}while(--w);x=a-y,z=B}}}else if(x+=d-w,w<k){k-=w;do{B[a++]=f[x++]}while(--w);x=a-y,z=B}for(;k>2;)B[a++]=z[x++],B[a++]=z[x++],B[a++]=z[x++],k-=3;k&&(B[a++]=z[x++],k>1&&(B[a++]=z[x++]))}else{x=a-y;do{B[a++]=B[x++],B[a++]=B[x++],B[a++]=B[x++],k-=3}while(k>2);k&&(B[a++]=B[x++],k>1&&(B[a++]=B[x++]))}break}}break}}while(i<r&&a<o);i-=k=c>>3,u&=(1<<(c-=k<<3))-1,e.next_in=i,e.next_out=a,e.avail_in=i<r?r-i+5:5-(i-r),e.avail_out=a<o?o-a+257:257-(a-o),n.hold=u,n.bits=c}var fn=15,un=852,cn=592,pn=0,gn=1,mn=2,vn=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],bn=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],wn=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],kn=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function yn(e,t,n,i,r,a,s,o){var l,h,_,d,f,u,c,p,g,m=o.bits,v=0,b=0,w=0,k=0,y=0,x=0,z=0,E=0,B=0,I=0,S=null,A=0,N=new R(fn+1),j=new R(fn+1),U=null,F=0;for(v=0;v<=fn;v++)N[v]=0;for(b=0;b<i;b++)N[t[n+b]]++;for(y=m,k=fn;k>=1&&0===N[k];k--);if(y>k&&(y=k),0===k)return r[a++]=20971520,r[a++]=20971520,o.bits=1,0;for(w=1;w<k&&0===N[w];w++);for(y<w&&(y=w),E=1,v=1;v<=fn;v++)if(E<<=1,(E-=N[v])<0)return-1;if(E>0&&(e===pn||1!==k))return-1;for(j[1]=0,v=1;v<fn;v++)j[v+1]=j[v]+N[v];for(b=0;b<i;b++)0!==t[n+b]&&(s[j[t[n+b]]++]=b);if(e===pn?(S=U=s,u=19):e===gn?(S=vn,A-=257,U=bn,F-=257,u=256):(S=wn,U=kn,u=-1),I=0,b=0,v=w,f=a,x=y,z=0,_=-1,d=(B=1<<y)-1,e===gn&&B>un||e===mn&&B>cn)return 1;for(;;){c=v-z,s[b]<u?(p=0,g=s[b]):s[b]>u?(p=U[F+s[b]],g=S[A+s[b]]):(p=96,g=0),l=1<<v-z,w=h=1<<x;do{r[f+(I>>z)+(h-=l)]=c<<24|p<<16|g|0}while(0!==h);for(l=1<<v-1;I&l;)l>>=1;if(0!==l?(I&=l-1,I+=l):I=0,b++,0==--N[v]){if(v===k)break;v=t[n+s[b]]}if(v>y&&(I&d)!==_){for(0===z&&(z=y),f+=w,E=1<<(x=v-z);x+z<k&&!((E-=N[x+z])<=0);)x++,E<<=1;if(B+=1<<x,e===gn&&B>un||e===mn&&B>cn)return 1;r[_=I&d]=y<<24|x<<16|f-a|0}}return 0!==I&&(r[f+I]=v-z<<24|64<<16|0),o.bits=y,0}var xn=0,zn=1,En=2,Bn=4,In=5,Sn=6,An=0,Nn=1,jn=2,Un=-2,Fn=-3,Rn=-4,Cn=-5,Mn=8,On=1,Hn=2,Zn=3,Qn=4,Ln=5,Tn=6,Dn=7,Pn=8,Vn=9,Gn=10,Kn=11,Yn=12,Xn=13,qn=14,$n=15,Jn=16,Wn=17,ei=18,ti=19,ni=20,ii=21,ri=22,ai=23,si=24,oi=25,li=26,hi=27,_i=28,di=29,fi=30,ui=31,ci=32,pi=852,gi=592;function mi(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function vi(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new R(320),this.work=new R(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function bi(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,function(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=On,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new C(pi),t.distcode=t.distdyn=new C(gi),t.sane=1,t.back=-1,An):Un}(e)):Un}function wi(e,t){var n,i;return e?(i=new vi,e.state=i,i.window=null,(n=function(e,t){var n,i;return e&&e.state?(i=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?Un:(null!==i.window&&i.wbits!==t&&(i.window=null),i.wrap=n,i.wbits=t,bi(e))):Un}(e,t))!==An&&(e.state=null),n):Un}var ki,yi,xi=!0;function zi(e){if(xi){var t;for(ki=new C(512),yi=new C(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(yn(zn,e.lens,0,288,ki,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;yn(En,e.lens,0,32,yi,0,e.work,{bits:5}),xi=!1}e.lencode=ki,e.lenbits=9,e.distcode=yi,e.distbits=5}function Ei(e,t,n,i){var r,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new F(a.wsize)),i>=a.wsize?(M(a.window,t,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):((r=a.wsize-a.wnext)>i&&(r=i),M(a.window,t,n-i,r,a.wnext),(i-=r)?(M(a.window,t,n-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=r,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=r))),0}function Bi(e,t){var n,i,r,a,s,o,l,h,_,d,f,u,c,p,g,m,v,b,w,k,y,x,z,E,B=0,I=new F(4),S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return Un;(n=e.state).mode===Yn&&(n.mode=Xn),s=e.next_out,r=e.output,l=e.avail_out,a=e.next_in,i=e.input,o=e.avail_in,h=n.hold,_=n.bits,d=o,f=l,x=An;e:for(;;)switch(n.mode){case On:if(0===n.wrap){n.mode=Xn;break}for(;_<16;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if(2&n.wrap&&35615===h){n.check=0,I[0]=255&h,I[1]=h>>>8&255,n.check=Te(n.check,I,2,0),h=0,_=0,n.mode=Hn;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&h)<<8)+(h>>8))%31){e.msg="incorrect header check",n.mode=fi;break}if((15&h)!==Mn){e.msg="unknown compression method",n.mode=fi;break}if(_-=4,y=8+(15&(h>>>=4)),0===n.wbits)n.wbits=y;else if(y>n.wbits){e.msg="invalid window size",n.mode=fi;break}n.dmax=1<<y,e.adler=n.check=1,n.mode=512&h?Gn:Yn,h=0,_=0;break;case Hn:for(;_<16;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if(n.flags=h,(255&n.flags)!==Mn){e.msg="unknown compression method",n.mode=fi;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=fi;break}n.head&&(n.head.text=h>>8&1),512&n.flags&&(I[0]=255&h,I[1]=h>>>8&255,n.check=Te(n.check,I,2,0)),h=0,_=0,n.mode=Zn;case Zn:for(;_<32;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}n.head&&(n.head.time=h),512&n.flags&&(I[0]=255&h,I[1]=h>>>8&255,I[2]=h>>>16&255,I[3]=h>>>24&255,n.check=Te(n.check,I,4,0)),h=0,_=0,n.mode=Qn;case Qn:for(;_<16;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}n.head&&(n.head.xflags=255&h,n.head.os=h>>8),512&n.flags&&(I[0]=255&h,I[1]=h>>>8&255,n.check=Te(n.check,I,2,0)),h=0,_=0,n.mode=Ln;case Ln:if(1024&n.flags){for(;_<16;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}n.length=h,n.head&&(n.head.extra_len=h),512&n.flags&&(I[0]=255&h,I[1]=h>>>8&255,n.check=Te(n.check,I,2,0)),h=0,_=0}else n.head&&(n.head.extra=null);n.mode=Tn;case Tn:if(1024&n.flags&&((u=n.length)>o&&(u=o),u&&(n.head&&(y=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),M(n.head.extra,i,a,u,y)),512&n.flags&&(n.check=Te(n.check,i,u,a)),o-=u,a+=u,n.length-=u),n.length))break e;n.length=0,n.mode=Dn;case Dn:if(2048&n.flags){if(0===o)break e;u=0;do{y=i[a+u++],n.head&&y&&n.length<65536&&(n.head.name+=String.fromCharCode(y))}while(y&&u<o);if(512&n.flags&&(n.check=Te(n.check,i,u,a)),o-=u,a+=u,y)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=Pn;case Pn:if(4096&n.flags){if(0===o)break e;u=0;do{y=i[a+u++],n.head&&y&&n.length<65536&&(n.head.comment+=String.fromCharCode(y))}while(y&&u<o);if(512&n.flags&&(n.check=Te(n.check,i,u,a)),o-=u,a+=u,y)break e}else n.head&&(n.head.comment=null);n.mode=Vn;case Vn:if(512&n.flags){for(;_<16;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if(h!==(65535&n.check)){e.msg="header crc mismatch",n.mode=fi;break}h=0,_=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=Yn;break;case Gn:for(;_<32;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}e.adler=n.check=mi(h),h=0,_=0,n.mode=Kn;case Kn:if(0===n.havedict)return e.next_out=s,e.avail_out=l,e.next_in=a,e.avail_in=o,n.hold=h,n.bits=_,jn;e.adler=n.check=1,n.mode=Yn;case Yn:if(t===In||t===Sn)break e;case Xn:if(n.last){h>>>=7&_,_-=7&_,n.mode=hi;break}for(;_<3;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}switch(n.last=1&h,_-=1,3&(h>>>=1)){case 0:n.mode=qn;break;case 1:if(zi(n),n.mode=ni,t===Sn){h>>>=2,_-=2;break e}break;case 2:n.mode=Wn;break;case 3:e.msg="invalid block type",n.mode=fi}h>>>=2,_-=2;break;case qn:for(h>>>=7&_,_-=7&_;_<32;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if((65535&h)!=(h>>>16^65535)){e.msg="invalid stored block lengths",n.mode=fi;break}if(n.length=65535&h,h=0,_=0,n.mode=$n,t===Sn)break e;case $n:n.mode=Jn;case Jn:if(u=n.length){if(u>o&&(u=o),u>l&&(u=l),0===u)break e;M(r,i,a,u,s),o-=u,a+=u,l-=u,s+=u,n.length-=u;break}n.mode=Yn;break;case Wn:for(;_<14;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if(n.nlen=257+(31&h),h>>>=5,_-=5,n.ndist=1+(31&h),h>>>=5,_-=5,n.ncode=4+(15&h),h>>>=4,_-=4,n.nlen>286||n.ndist>30){e.msg="too many length or distance symbols",n.mode=fi;break}n.have=0,n.mode=ei;case ei:for(;n.have<n.ncode;){for(;_<3;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}n.lens[S[n.have++]]=7&h,h>>>=3,_-=3}for(;n.have<19;)n.lens[S[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,z={bits:n.lenbits},x=yn(xn,n.lens,0,19,n.lencode,0,n.work,z),n.lenbits=z.bits,x){e.msg="invalid code lengths set",n.mode=fi;break}n.have=0,n.mode=ti;case ti:for(;n.have<n.nlen+n.ndist;){for(;m=(B=n.lencode[h&(1<<n.lenbits)-1])>>>16&255,v=65535&B,!((g=B>>>24)<=_);){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if(v<16)h>>>=g,_-=g,n.lens[n.have++]=v;else{if(16===v){for(E=g+2;_<E;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if(h>>>=g,_-=g,0===n.have){e.msg="invalid bit length repeat",n.mode=fi;break}y=n.lens[n.have-1],u=3+(3&h),h>>>=2,_-=2}else if(17===v){for(E=g+3;_<E;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}_-=g,y=0,u=3+(7&(h>>>=g)),h>>>=3,_-=3}else{for(E=g+7;_<E;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}_-=g,y=0,u=11+(127&(h>>>=g)),h>>>=7,_-=7}if(n.have+u>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=fi;break}for(;u--;)n.lens[n.have++]=y}}if(n.mode===fi)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=fi;break}if(n.lenbits=9,z={bits:n.lenbits},x=yn(zn,n.lens,0,n.nlen,n.lencode,0,n.work,z),n.lenbits=z.bits,x){e.msg="invalid literal/lengths set",n.mode=fi;break}if(n.distbits=6,n.distcode=n.distdyn,z={bits:n.distbits},x=yn(En,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,z),n.distbits=z.bits,x){e.msg="invalid distances set",n.mode=fi;break}if(n.mode=ni,t===Sn)break e;case ni:n.mode=ii;case ii:if(o>=6&&l>=258){e.next_out=s,e.avail_out=l,e.next_in=a,e.avail_in=o,n.hold=h,n.bits=_,dn(e,f),s=e.next_out,r=e.output,l=e.avail_out,a=e.next_in,i=e.input,o=e.avail_in,h=n.hold,_=n.bits,n.mode===Yn&&(n.back=-1);break}for(n.back=0;m=(B=n.lencode[h&(1<<n.lenbits)-1])>>>16&255,v=65535&B,!((g=B>>>24)<=_);){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if(m&&0==(240&m)){for(b=g,w=m,k=v;m=(B=n.lencode[k+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&B,!(b+(g=B>>>24)<=_);){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}h>>>=b,_-=b,n.back+=b}if(h>>>=g,_-=g,n.back+=g,n.length=v,0===m){n.mode=li;break}if(32&m){n.back=-1,n.mode=Yn;break}if(64&m){e.msg="invalid literal/length code",n.mode=fi;break}n.extra=15&m,n.mode=ri;case ri:if(n.extra){for(E=n.extra;_<E;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}n.length+=h&(1<<n.extra)-1,h>>>=n.extra,_-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=ai;case ai:for(;m=(B=n.distcode[h&(1<<n.distbits)-1])>>>16&255,v=65535&B,!((g=B>>>24)<=_);){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if(0==(240&m)){for(b=g,w=m,k=v;m=(B=n.distcode[k+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&B,!(b+(g=B>>>24)<=_);){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}h>>>=b,_-=b,n.back+=b}if(h>>>=g,_-=g,n.back+=g,64&m){e.msg="invalid distance code",n.mode=fi;break}n.offset=v,n.extra=15&m,n.mode=si;case si:if(n.extra){for(E=n.extra;_<E;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}n.offset+=h&(1<<n.extra)-1,h>>>=n.extra,_-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=fi;break}n.mode=oi;case oi:if(0===l)break e;if(u=f-l,n.offset>u){if((u=n.offset-u)>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=fi;break}u>n.wnext?(u-=n.wnext,c=n.wsize-u):c=n.wnext-u,u>n.length&&(u=n.length),p=n.window}else p=r,c=s-n.offset,u=n.length;u>l&&(u=l),l-=u,n.length-=u;do{r[s++]=p[c++]}while(--u);0===n.length&&(n.mode=ii);break;case li:if(0===l)break e;r[s++]=n.length,l--,n.mode=ii;break;case hi:if(n.wrap){for(;_<32;){if(0===o)break e;o--,h|=i[a++]<<_,_+=8}if(f-=l,e.total_out+=f,n.total+=f,f&&(e.adler=n.check=n.flags?Te(n.check,r,f,s-f):Qe(n.check,r,f,s-f)),f=l,(n.flags?h:mi(h))!==n.check){e.msg="incorrect data check",n.mode=fi;break}h=0,_=0}n.mode=_i;case _i:if(n.wrap&&n.flags){for(;_<32;){if(0===o)break e;o--,h+=i[a++]<<_,_+=8}if(h!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=fi;break}h=0,_=0}n.mode=di;case di:x=Nn;break e;case fi:x=Fn;break e;case ui:return Rn;case ci:default:return Un}return e.next_out=s,e.avail_out=l,e.next_in=a,e.avail_in=o,n.hold=h,n.bits=_,(n.wsize||f!==e.avail_out&&n.mode<fi&&(n.mode<hi||t!==Bn))&&Ei(e,e.output,e.next_out,f-e.avail_out),d-=e.avail_in,f-=e.avail_out,e.total_in+=d,e.total_out+=f,n.total+=f,n.wrap&&f&&(e.adler=n.check=n.flags?Te(n.check,r,f,e.next_out-f):Qe(n.check,r,f,e.next_out-f)),e.data_type=n.bits+(n.last?64:0)+(n.mode===Yn?128:0)+(n.mode===ni||n.mode===$n?256:0),(0===d&&0===f||t===Bn)&&x===An&&(x=Cn),x}function Ii(e,t){var n,i=t.length;return e&&e.state?0!==(n=e.state).wrap&&n.mode!==Kn?Un:n.mode===Kn&&Qe(1,t,i,0)!==n.check?Fn:Ei(e,t,i,i)?(n.mode=ui,Rn):(n.havedict=1,An):Un}var Si={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};function Ai(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var Ni=Object.prototype.toString;function ji(e){if(!(this instanceof ji))return new ji(e);this.options=A({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Wt,this.strm.avail_out=0;var n,i,r,a=wi(this.strm,t.windowBits);if(a!==Si.Z_OK)throw new Error(Pe[a]);this.header=new Ai,n=this.strm,i=this.header,n&&n.state&&(0==(2&(r=n.state).wrap)||(r.head=i,i.done=!1))}function Ui(e,t){var n=new ji(t);if(n.push(e,!0),n.err)throw n.msg||Pe[n.err];return n.result}ji.prototype.push=function(e,t){var n,i,r,a,s,o,l=this.strm,h=this.options.chunkSize,_=this.options.dictionary,d=!1;if(this.ended)return!1;i=t===~~t?t:!0===t?Si.Z_FINISH:Si.Z_NO_FLUSH,"string"==typeof e?l.input=function(e){for(var t=new F(e.length),n=0,i=t.length;n<i;n++)t[n]=e.charCodeAt(n);return t}(e):"[object ArrayBuffer]"===Ni.call(e)?l.input=new Uint8Array(e):l.input=e,l.next_in=0,l.avail_in=l.input.length;do{if(0===l.avail_out&&(l.output=new F(h),l.next_out=0,l.avail_out=h),(n=Bi(l,Si.Z_NO_FLUSH))===Si.Z_NEED_DICT&&_&&(o="string"==typeof _?Xt(_):"[object ArrayBuffer]"===Ni.call(_)?new Uint8Array(_):_,n=Ii(this.strm,o)),n===Si.Z_BUF_ERROR&&!0===d&&(n=Si.Z_OK,d=!1),n!==Si.Z_STREAM_END&&n!==Si.Z_OK)return this.onEnd(n),this.ended=!0,!1;l.next_out&&(0!==l.avail_out&&n!==Si.Z_STREAM_END&&(0!==l.avail_in||i!==Si.Z_FINISH&&i!==Si.Z_SYNC_FLUSH)||("string"===this.options.to?(r=Jt(l.output,l.next_out),a=l.next_out-r,s=$t(l.output,r),l.next_out=a,l.avail_out=h-a,a&&M(l.output,l.output,r,a,0),this.onData(s)):this.onData(N(l.output,l.next_out)))),0===l.avail_in&&0===l.avail_out&&(d=!0)}while((l.avail_in>0||0===l.avail_out)&&n!==Si.Z_STREAM_END);return n===Si.Z_STREAM_END&&(i=Si.Z_FINISH),i===Si.Z_FINISH?(n=function(e){if(!e||!e.state)return Un;var t=e.state;return t.window&&(t.window=null),e.state=null,An}(this.strm),this.onEnd(n),this.ended=!0,n===Si.Z_OK):i!==Si.Z_SYNC_FLUSH||(this.onEnd(Si.Z_OK),l.avail_out=0,!0)},ji.prototype.onData=function(e){this.chunks.push(e)},ji.prototype.onEnd=function(e){e===Si.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=O(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};const Fi={};A(Fi,ln,Object.freeze({Inflate:ji,inflate:Ui,inflateRaw:function(e,t){return(t=t||{}).raw=!0,Ui(e,t)},ungzip:Ui}),Si);var Ri=Fi;const Ci={decompress:function(e){let t=new Uint8Array(e);return Ri.inflate(t).buffer}};class Mi{constructor(e,t){this.fh=e;let n=this._read_node(t);this.root_node=n;var i=new Map,r=n.get("node_level");for(i.set(r,[n]);0!=r;){var a=[];for(var s of i.get(r))for(var o of s.get("addresses"))a.push(this._read_node(o));let e=a[0].get("node_level");i.set(e,a),r=e}this.all_nodes=i}_read_node(e){let t=r(Zi,this.fh,e);e+=s(Zi);for(var n=[],i=[],a=t.get("entries_used"),o=0;o<a;o++){let[t,r]=_.unpack_from("<II",this.fh,e);e+=8;let[a,s]=_.unpack_from("<II",this.fh,e);e+=8,n.push(t),i.push(a)}return n.push(_.unpack_from("<I",this.fh,e)[0]),t.set("keys",n),t.set("addresses",i),t}symbol_table_addresses(){var e=[],t=this.all_nodes.get(0);for(var n of t)e=e.concat(n.get("addresses"));return e}}class Oi{constructor(e,t,n){this.fh=e,this.dims=n;var i=this._read_node(t);this.root_node=i;var r={},a=i.get("node_level");for(r[a]=[i];0!=a;){let e=[];for(var s of r[a].values())for(var o of s.get("addresses"))e.push(this._read_node(o));let t=e[0].get("node_level");r[t]=e,a=t}this.all_nodes=r}_read_node(e){let t=r(Zi,this.fh,e);e+=s(Zi);var n=[],i=[];let a=t.get("entries_used");for(var o=0;o<a;o++){let[t,r]=_.unpack_from("<II",this.fh,e);e+=8;let a="<"+this.dims.toFixed()+"Q",s=_.calcsize(a),o=_.unpack_from(a,this.fh,e);e+=s;let l=_.unpack_from("<Q",this.fh,e)[0];e+=8,n.push(new Map([["chunk_size",t],["filter_mask",r],["chunk_offset",o]])),i.push(l)}return t.set("keys",n),t.set("addresses",i),t}construct_data_from_chunks(e,t,n,i){var r,a,s;if(n instanceof Array){n;let e=n[0];if("REFERENCE"==e){if(8!=n[1])throw"NotImplementedError('Unsupported Reference type')";n="<u8";r="getUint64",a=!1,s=8}else{if("VLEN_STRING"!=e&&"VLEN_SEQUENCE"!=e)throw"NotImplementedError('datatype not implemented')";r="getVLENStruct",a=!1,s=16}}else null,[r,a,s]=h(n);var o=t.reduce((function(e,t){return e*t}),1),l=e.reduce((function(e,t){return e*t}),1);let _=t.length;var d=1,u=(e.slice().map((function(e){let t=d;return d*=e,t})),d=1,t.slice().reverse().map((function(e){let t=d;return d*=e,t})).reverse()),c=new Array(o);let p=l*s;for(var g of this.all_nodes[0]){let n=g.get("keys"),o=g.get("addresses"),h=n.length;for(var m=0;m<h;m++){let h=n[m],d=o[m];var v;if(null==i)v=this.fh.slice(d,d+p);else{v=this.fh.slice(d,d+h.get("chunk_size"));let e=h.get("filter_mask");v=this._filter_chunk(v,e,i,s)}for(var b=h.get("chunk_offset").slice(),w=b.slice(),k=w.map((function(){return 0})),y=new f(v),x=0;x<l;x++){for(var z=_-1;z>=0&&k[z]>=e[z];z--)k[z]=0,w[z]=b[z],z>0&&(k[z-1]+=1,w[z-1]+=1);if(w.slice(0,-1).every((function(e,n){return e<t[n]}))){let e=x*s,t=y[r](e,!a,s);c[w.slice(0,-1).reduce((function(e,t,n){return t*u[n]+e}),0)]=t}k[_-1]+=1,w[_-1]+=1}}}return c}_filter_chunk(e,t,n,i){let r=n.length;for(var a=e.slice(),s=r-1;s>=0;s--){if(t&1<<s)continue;let e=n[s].get("filter_id");if(e==Qi)a=Ci.decompress(a);else if(e==Li){let e=a.byteLength;var o=new Uint8Array(e);let t=Math.floor(e/i),n=new DataView(a);for(var l=0;l<i;l++)for(var h=0;h<t;h++)o[l+h*i]=n.getUint8(l*t+h);a=o.buffer}else{if(e!=Ti)throw'NotImplementedError("Filter with id:'+e.toFixed()+' not supported")';Hi(a),a=a.slice(0,-4)}}return a}}function Hi(e){for(var t=e.byteLength%2!=0,n=e.byteLength-4,i=new f(e),r=0,a=0,s=0;s<n-1;s+=2){a=(a+(r=(r+i.getUint16(s,!0))%65535))%65535}if(t){a=(a+(r=(r+i.getUint8(n-1))%65535))%65535}var[o,l]=_.unpack_from(">HH",e,n);if(l%=65535,r!=(o%=65535)||a!=l)throw'ValueError("fletcher32 checksum invalid")';return!0}var Zi=new Map([["signature","4s"],["node_type","B"],["node_level","B"],["entries_used","H"],["left_sibling","Q"],["right_sibling","Q"]]);const Qi=1,Li=2,Ti=3;class Di{constructor(e,t){let n=_.unpack_from("<B",e,t+8);var i;if(0==n)i=r(Yi,e,t),this._end_of_sblock=t+Xi;else{if(2!=n&&3!=n)throw"unsupported superblock version: "+n.toFixed();i=r(qi,e,t),this._end_of_sblock=t+$i}if(i.get("format_signature")!=Ki)throw"Incorrect file signature: "+i.get("format_signature");if(8!=i.get("offset_size")||8!=i.get("length_size"))throw"File uses non-64-bit addressing";this.version=i.get("superblock_version"),this._contents=i,this._root_symbol_table=null,this._fh=e}get offset_to_dataobjects(){if(0==this.version){var e=new Vi(this._fh,this._end_of_sblock,!0);return this._root_symbol_table=e,e.group_offset}if(2==this.version||3==this.version)return this._contents.get("root_group_address");throw"Not implemented version = "+this.version.toFixed()}}class Pi{constructor(e,t){let n=r(nr,e,t);a("HEAP"==n.get("signature")),a(0==n.get("version"));let i=n.get("address_of_data_segment"),s=e.slice(i,i+n.get("data_segment_size"));n.set("heap_data",s),this._contents=n,this.data=s}get_object_name(e){let t=new Uint8Array(this.data).indexOf(0,e)-e;return _.unpack_from("<"+t.toFixed()+"s",this.data,e)[0]}}class Vi{constructor(e,t,n=!1){var i;if(n)i=new Map([["symbols",1]]);else{if("SNOD"!=(i=r(er,e,t)).get("signature"))throw"incorrect node type";t+=tr}for(var a=[],s=i.get("symbols"),o=0;o<s;o++)a.push(r(Ji,e,t)),t+=Wi;n&&(this.group_offset=a[0].get("object_header_address")),this.entries=a,this._contents=i}assign_name(e){this.entries.forEach((function(t){let n=t.get("link_name_offset"),i=e.get_object_name(n);t.set("link_name",i)}))}get_links(){var e={};return this.entries.forEach((function(t){e[t.get("link_name")]=t.get("object_header_address")})),e}}class Gi{constructor(e,t){let n=r(ir,e,t);t+=rr;let i=n.get("collection_size")-rr,a=e.slice(t,t+i);this.heap_data=a,this._header=n,this._objects=null}get objects(){if(null==this._objects){this._objects=new Map;for(var e=0;e<=this.heap_data.byteLength-sr;){let t=r(ar,this.heap_data,e);if(0==t.get("object_index"))break;e+=sr;let n=this.heap_data.slice(e,e+t.get("object_size"));this._objects.set(t.get("object_index"),n),e+=o(t.get("object_size"))}}return this._objects}}var Ki=_.unpack_from("8s",new Uint8Array([137,72,68,70,13,10,26,10]).buffer)[0],Yi=new Map([["format_signature","8s"],["superblock_version","B"],["free_storage_version","B"],["root_group_version","B"],["reserved_0","B"],["shared_header_version","B"],["offset_size","B"],["length_size","B"],["reserved_1","B"],["group_leaf_node_k","H"],["group_internal_node_k","H"],["file_consistency_flags","L"],["base_address_lower","Q"],["free_space_address","Q"],["end_of_file_address","Q"],["driver_information_address","Q"]]),Xi=s(Yi),qi=new Map([["format_signature","8s"],["superblock_version","B"],["offset_size","B"],["length_size","B"],["file_consistency_flags","B"],["base_address","Q"],["superblock_extension_address","Q"],["end_of_file_address","Q"],["root_group_address","Q"],["superblock_checksum","I"]]),$i=s(qi),Ji=new Map([["link_name_offset","Q"],["object_header_address","Q"],["cache_type","I"],["reserved","I"],["scratch","16s"]]),Wi=s(Ji),er=new Map([["signature","4s"],["version","B"],["reserved_0","B"],["symbols","H"]]),tr=s(er),nr=new Map([["signature","4s"],["version","B"],["reserved","3s"],["data_segment_size","Q"],["offset_to_free_list","Q"],["address_of_data_segment","Q"]]),ir=new Map([["signature","4s"],["version","B"],["reserved","3s"],["collection_size","Q"]]),rr=s(ir),ar=new Map([["object_index","H"],["reference_count","H"],["reserved","I"],["object_size","Q"]]),sr=s(ar);class or{constructor(e,t){let n=_.unpack_from("<B",e,t)[0];if(1==n)var[i,r,a]=this._parse_v1_objects(e,t);else{if(n!="O".charCodeAt(0))throw"InvalidHDF5File('unknown Data Object Header')";var[i,r,a]=this._parse_v2_objects(e,t)}this.fh=e,this.msgs=i,this.msg_data=r,this.offset=t,this._global_heaps={},this._header=a,this._filter_pipeline=null,this._chunk_params_set=!1,this._chunks=null,this._chunk_dims=null,this._chunk_address=null}get dtype(){let e=this.find_msg_type(Ur)[0].get("offset_to_message");return new u(this.fh,e).dtype}get chunks(){return this._get_chunk_params(),this._chunks}get shape(){let e=this.find_msg_type(jr)[0].get("offset_to_message");return function(e,t){let n=_.unpack_from("<B",e,t)[0];var i;if(1==n)a(1==(i=r(gr,e,t)).get("version")),t+=mr;else{if(2!=n)throw"InvalidHDF5File('unknown dataspace message version')";a(2==(i=r(vr,e,t)).get("version")),t+=br}let s=i.get("dimensionality");return _.unpack_from("<"+(2*s).toFixed()+"I",e,t).filter((function(e,t){return t%2==0}))}(this.fh,e)}get filter_pipeline(){if(null!=this._filter_pipeline)return this._filter_pipeline;let e=this.find_msg_type(Mr);if(!e.length)return this._filter_pipeline=null,this._filter_pipeline;var t=e[0].get("offset_to_message");let[n,i]=_.unpack_from("<BB",this.fh,t);if(t+=_.calcsize("<BB"),1!=n)throw'NotImplementedError("only version 1 filters supported. ")';let[a,s]=_.unpack_from("<HI",this.fh,t);t+=_.calcsize("<HI");for(var l=[],h=0;h<i;h++){let e=r(Ar,this.fh,t);t+=Nr;let n=o(e.get("name_length"),8),i="<"+n.toFixed()+"s",a=_.unpack_from(i,this.fh,t)[0];e.set("filter_name",a),t+=n,i="<"+e.get("client_data_values").toFixed()+"I";let s=_.unpack_from(i,this.fh,t);e.set("client_data",s),t+=4*e.get("client_data_values"),e.get("client_data_values")%2&&(t+=4),l.push(e)}return this._filter_pipeline=l,this._filter_pipeline}find_msg_type(e){return this.msgs.filter((function(t){return t.get("type")==e}))}get_attributes(){let e={},t=this.find_msg_type(Or);for(var n of t){let t=n.get("offset_to_message"),[i,r]=this.unpack_attribute(t);e[i]=r}return e}get fillvalue(){var e,t=this.find_msg_type(Fr)[0].get("offset_to_message");let n=_.unpack_from("<B",this.fh,t)[0];var i,a,s;if(1==n||2==n)i=r(Er,this.fh,t),t+=Br,e=i.get("fillvalue_defined");else{if(3!=n)throw'InvalidHDF5File("Unknown fillvalue msg version: "'+String(n);i=r(Ir,this.fh,t),t+=Sr,e=32&i.get("flags")}if(e?(a=_.unpack_from("<I",this.fh,t)[0],t+=4):a=0,a){let[e,n,i]=h(this.dtype);s=new f(this.fh)[e](t,!n,i)}else s=0;return s}unpack_attribute(e){let t=_.unpack_from("<B",this.fh,e)[0];var n,i;if(1==t)a(1==(n=r(_r,this.fh,e)).get("version")),e+=dr,i=8;else{if(3!=t)throw"unsupported attribute message version: "+t;a(3==(n=r(fr,this.fh,e)).get("version")),e+=ur,i=1}let s=n.get("name_size"),l=_.unpack_from("<"+s.toFixed()+"s",this.fh,e)[0];var h;l=l.replace(/\x00$/,""),e+=o(s,i);try{h=new u(this.fh,e).dtype}catch(e){return console.log("Attribute "+l+" type not implemented, set to null."),[l,null]}e+=o(n.get("datatype_size"),i);let d=this.determine_data_shape(this.fh,e),f=d.reduce((function(e,t){return e*t}),1);e+=o(n.get("dataspace_size"),i);var c=this._attr_value(h,this.fh,f,e);return 0==d.length&&(c=c[0]),[l,c]}determine_data_shape(e,t){let n=_.unpack_from("<B",e,t)[0];var i;if(1==n)a(1==(i=r(gr,e,t)).get("version")),t+=mr;else{if(2!=n)throw"unknown dataspace message version";a(2==(i=r(vr,e,t)).get("version")),t+=br}let s=i.get("dimensionality");return _.unpack_from("<"+s.toFixed()+"Q",e,t)}_attr_value(e,t,n,i){var r=new Array(n);if(e instanceof Array){let h=e[0];for(var a=0;a<n;a++)if("VLEN_STRING"==h){var[s,o,l]=e,[d,u]=this._vlen_size_and_data(t,i);let n="<"+d.toFixed()+"s",h=_.unpack_from(n,u,0)[0];r[a]=0==l?h:decodeURIComponent(escape(h)),i+=16}else if("REFERENCE"==h){var c=_.unpack_from("<Q",t,i);r[a]=c,i+=8}else{if("VLEN_SEQUENCE"!=h)throw"NotImplementedError";{let n=e[1];var[d,u]=this._vlen_size_and_data(t,i);r[a]=this._attr_value(n,u,d,0),i+=16}}}else{let[s,o,l]=h(e),_=new f(t,0);for(a=0;a<n;a++)r[a]=_[s](i,!o,l),i+=l}return r}_vlen_size_and_data(e,t){let n=_.unpack_from("<I",e,t)[0],i=r(hr,e,t+4),s=i.get("collection_address");var o;return a(i.get("collection_address")<Number.MAX_SAFE_INTEGER),s in this._global_heaps||(o=new Gi(this.fh,s),this._global_heaps[s]=o),[n,(o=this._global_heaps[s]).objects.get(i.get("object_index"))]}_parse_v1_objects(e,t){let n=r(cr,e,t);a(1==n.get("version"));let i=n.get("total_header_messages");for(var o=n.get("object_header_size"),l=t+s(cr),h=e.slice(l,l+o),d=[[l,o]],f=0,u=0,c=new Array(i),p=0;p<i;p++){u>=o&&([l,o]=d[++f],u=0);let t=r(wr,e,l+u),n=l+u+kr;if(t.set("offset_to_message",n),t.get("type")==Hr){var[g,m]=_.unpack_from("<QQ",e,n);d.push([g,m])}u+=kr+t.get("size"),c[p]=t}return[c,h,n]}_parse_v2_objects(e,t){var[n,i,a]=this._parse_v2_header(e,t);t=a;for(var s=[],o=n.get("size_of_chunk_0"),l=e.slice(t,t+=o),h=[[a,o]],d=0,f=0;;){if(f>=o){let e=h[++d];if(null==e)break;[a,o]=e,f=0}let t=r(yr,e,a+f),n=a+f+xr+i;if(t.set("offset_to_message",n),t.get("type")==Hr){var[u,c]=_.unpack_from("<QQ",e,n);h.push([u,c])}f+=xr+t.get("size")+i,s.push(t)}return[s,l,n]}_parse_v2_header(e,t){let n=r(pr,e,t);var i;if(t+=s(pr),a(2==n.get("version")),i=4&n.get("flags")?2:0,a(0==(16&n.get("flags"))),32&n.get("flags")){let i=_.unpack_from("<4I",e,t);t+=16,n.set("access_time",i[0]),n.set("modification_time",i[1]),n.set("change_time",i[2]),n.set("birth_time",i[3])}let o=["<B","<H","<I","<Q"][3&n.get("flags")];return n.set("size_of_chunk_0",_.unpack_from(o,e,t)[0]),[n,i,t+=_.calcsize(o)]}get_links(){let e=this.find_msg_type(Zr);return e.length>0?this._get_links_from_symbol_tables(e):this._get_links_from_link_msgs()}_get_links_from_symbol_tables(e){a(1==e.length),a(16==e[0].get("size"));let t=r(zr,this.fh,e[0].get("offset_to_message"));var n=new Mi(this.fh,t.get("btree_address")),i=new Pi(this.fh,t.get("heap_address")),s={};for(var o of n.symbol_table_addresses()){let e=new Vi(this.fh,o);e.assign_name(i);let t=e.get_links();for(var l in t)s[l]=t[l]}return s}_get_links_from_link_msgs(){var e={},t=this.find_msg_type(Rr);for(var n of t){let t=n.get("offset_to_message");var[i,r]=_.unpack_from("<BB",this.fh,t);t+=2,a(1==i),a(0==(1&r)),a(0==(2&r)),a(0==(8&r)),a(0==(16&r)),4&r&&(t+=8);let s=_.unpack_from("<B",this.fh,t)[0];t+=1;let o=_.unpack_from("<"+s.toFixed()+"s",this.fh,t);t+=s;let l=_.unpack_from("<Q",this.fh,t)[0];e[o]=l}return e}get is_dataset(){return this.find_msg_type(jr).length>0}get_data(){let e=this.find_msg_type(Cr)[0].get("offset_to_message");var[t,n,i,r]=this._get_data_message_properties(e);if(2==i)return this._get_chunked_data(e);a(1==i);var[s]=_.unpack_from("<Q",this.fh,r);let o=_.unpack_from("<II",this.fh,r);if(o[0]==lr[0]&&o[1]==lr[1]){let e=this.shape.reduce((function(e,t){return e*t}),1);return new Array(e)}var l=this.shape.reduce((function(e,t){return e*t}),1);if(this.dtype instanceof Array){let e=this.dtype[0];if("REFERENCE"==e){if(8!=this.dtype[1])throw"NotImplementedError('Unsupported Reference type')";return this.fh.slice(s,s+l)}if("VLEN_STRING"==e){var[d,u,c]=this.dtype,p=[];for(v=0;v<l;v++){var[g,m]=this._vlen_size_and_data(this.fh,s);let e="<"+g.toFixed()+"s",t=_.unpack_from(e,m,0)[0];p[v]=0==c?t:decodeURIComponent(escape(t)),s+=16}return p}throw"NotImplementedError('datatype not implemented')"}{let e=this.dtype;if(/[<>=!@\|]?(i|u|f|S)(\d*)/.test(e)){let[t,n,i]=h(e),r=new Array(l),a=new f(this.fh);for(var v=0;v<l;v++)r[v]=a[t](s+v*i,!n,i);return r}throw"not Implemented - no proper dtype defined"}}_get_chunked_data(e){this._get_chunk_params();let t=new Oi(this.fh,this._chunk_address,this._chunk_dims).construct_data_from_chunks(this.chunks,this.shape,this.dtype,this.filter_pipeline);if(this.dtype instanceof Array&&/^VLEN/.test(this.dtype[0])){let e=this.dtype[0];for(var n=0;n<t.length;n++){let[r,a,s]=t[n];var i;a in this._global_heaps?i=this._global_heaps[a]:(i=new Gi(this.fh,a),this._global_heaps[a]=i);let o=i.objects.get(s);if("VLEN_STRING"==e){let e=this.dtype[2],i="<"+r.toFixed()+"s",a=_.unpack_from(i,o,0)[0];t[n]=0==e?a:decodeURIComponent(escape(a))}}}return t}_get_chunk_params(){if(!this._chunk_params_set){this._chunk_params_set=!0;var e=this.find_msg_type(Cr)[0].get("offset_to_message"),[t,n,i,r]=this._get_data_message_properties(e);if(2==i){var s;if(1==t||2==t){var o=_.unpack_from("<Q",this.fh,r)[0];s=r+_.calcsize("<Q")}else if(3==t){var[n,o]=_.unpack_from("<BQ",this.fh,r);s=r+_.calcsize("<BQ")}a(t>=1&&t<=3);var l="<"+(n-1).toFixed()+"I",h=_.unpack_from(l,this.fh,s);this._chunks=h,this._chunk_dims=n,this._chunk_address=o}}}_get_data_message_properties(e){var[t,n,i]=[null,null,null],[r,s,o]=_.unpack_from("<BBB",this.fh,e);return 1==r||2==r?(t=s,i=e+8,a(1==(n=o)||2==n)):3!=r&&4!=r||(n=s,i=e,i+=_.calcsize("<BB")),a(r>=1&&r<=4),[r,t,n,i]}}var lr=_.unpack_from("<II",new Uint8Array([255,255,255,255,255,255,255,255]).buffer),hr=new Map([["collection_address","Q"],["object_index","I"]]),_r=(s(hr),new Map([["version","B"],["reserved","B"],["name_size","H"],["datatype_size","H"],["dataspace_size","H"]])),dr=s(_r),fr=new Map([["version","B"],["flags","B"],["name_size","H"],["datatype_size","H"],["dataspace_size","H"],["character_set_encoding","B"]]),ur=s(fr),cr=new Map([["version","B"],["reserved","B"],["total_header_messages","H"],["object_reference_count","I"],["object_header_size","I"],["padding","I"]]),pr=new Map([["signature","4s"],["version","B"],["flags","B"]]),gr=new Map([["version","B"],["dimensionality","B"],["flags","B"],["reserved_0","B"],["reserved_1","I"]]),mr=s(gr),vr=new Map([["version","B"],["dimensionality","B"],["flags","B"],["type","B"]]),br=s(vr),wr=new Map([["type","H"],["size","H"],["flags","B"],["reserved","3s"]]),kr=s(wr),yr=new Map([["type","B"],["size","H"],["flags","B"]]),xr=s(yr),zr=new Map([["btree_address","Q"],["heap_address","Q"]]),Er=new Map([["version","B"],["space_allocation_time","B"],["fillvalue_write_time","B"],["fillvalue_defined","B"]]),Br=s(Er),Ir=new Map([["version","B"],["flags","B"]]),Sr=s(Ir),Ar=new Map([["filter_id","H"],["name_length","H"],["flags","H"],["client_data_values","H"]]),Nr=s(Ar),jr=1,Ur=3,Fr=5,Rr=6,Cr=8,Mr=11,Or=12,Hr=16,Zr=17;const Qr="0.4.0.dev";class Lr{constructor(e,t,n,i=!1){if(null==n?(this.parent=this,this.file=this):(this.parent=n,this.file=n.file),this.name=e,this._links=t.get_links(),this._dataobjects=t,this._attrs=null,this._keys=null,i)return new Proxy(this,Tr)}get keys(){return null==this._keys&&(this._keys=Object.keys(this._links)),this._keys.slice()}get values(){return this.keys.map(e=>this.get(e))}length(){return this.keys.length}_dereference(e){if(!e)throw"cannot deference null reference";let t=this.file._get_object_by_address(e);if(null==t)throw"reference not found in file";return t}get(e){if("number"==typeof e)return this._dereference(e);var t=Vr(e);if("/"==t)return this.file;if("."==t)return this;if(/^\//.test(t))return this.file.get(t.slice(1));if(""!=function(e){let t=e.lastIndexOf("/")+1,n=e.slice(0,t),i=new RegExp("^/+$"),r=new RegExp("/$");n&&!i.test(n)&&(n=n.replace(r,""));return n}(t))var[n,i]=t.split(/\/(.*)/);else var n=t,i=".";if(!(n in this._links))throw n+" not found in group";var r=Vr(this.name+"/"+n),a=new or(this.file._fh,this._links[n]);if(a.is_dataset){if("."!=i)throw r+" is a dataset, not a group";return new Pr(r,a,this)}return new Lr(r,a,this).get(i)}visit(e){return this.visititems((t,n)=>e(t))}visititems(e){var t=this.name.length;/\/$/.test(this.name)||(t+=1);for(var n=this.values.slice();n;){let i=n.shift();1==n.length&&console.log(i);let r=e(i.name.slice(t),i);if(null!=r)return r;i instanceof Lr&&(n=n.concat(i.values))}return null}get attrs(){return null==this._attrs&&(this._attrs=this._dataobjects.get_attributes()),this._attrs}}const Tr={get:function(e,t,n){return t in e?e[t]:e.get(t)}};class Dr extends Lr{constructor(e,t){var n=new Di(e,0).offset_to_dataobjects;super("/",new or(e,n),null),this.parent=this,this._fh=e,this.filename=t||"",this.file=this,this.mode="r",this.userblock_size=0}_get_object_by_address(e){return this._dataobjects.offset==e?this:this.visititems(e=>{e._dataobjects.offset})}}class Pr extends Array{constructor(e,t,n){super(),this.parent=n,this.file=n.file,this.name=e,this._dataobjects=t,this._attrs=null,this._astype=null}get value(){var e=this._dataobjects.get_data();return null==this._astype?e:e.astype(this._astype)}get shape(){return this._dataobjects.shape}get attrs(){return this._dataobjects.get_attributes()}get dtype(){return this._dataobjects.dtype}get fillvalue(){return this._dataobjects.fillvalue}}function Vr(e){return e.replace(/\/(\/)+/g,"/")}n.d(t,"__version__",(function(){return Qr})),n.d(t,"Group",(function(){return Lr})),n.d(t,"File",(function(){return Dr})),n.d(t,"Dataset",(function(){return Pr})),window.hdf5=i}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,