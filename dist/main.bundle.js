!function(e){function t(t){for(var n,r,o=t[0],l=t[1],h=t[2],d=0,f=[];d<o.length;d++)r=o[d],Object.prototype.hasOwnProperty.call(a,r)&&a[r]&&f.push(a[r][0]),a[r]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(_&&_(t);f.length;)f.shift()();return s.push.apply(s,h||[]),i()}function i(){for(var e,t=0;t<s.length;t++){for(var i=s[t],n=!0,o=1;o<i.length;o++){var l=i[o];0!==a[l]&&(n=!1)}n&&(s.splice(t--,1),e=r(r.s=i[0]))}return e}var n={},a={0:0},s=[];function r(t){if(n[t])return n[t].exports;var i=n[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=n,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="";var o=window.webpackJsonp=window.webpackJsonp||[],l=o.push.bind(o);o.push=t,o=o.slice();for(var h=0;h<o.length;h++)t(o[h]);var _=l;s.push([271,1]),i()}({107:function(e,t){},108:function(e,t){},109:function(e,t){},110:function(e,t){},111:function(e,t){},112:function(e,t){},271:function(e,t,i){"use strict";i.r(t);var n={};i.r(n),i.d(n,"__version__",(function(){return Ta})),i.d(n,"Group",(function(){return Da})),i.d(n,"File",(function(){return Va})),i.d(n,"Dataset",(function(){return Ga}));var a=i(2),s=i(60);function r(e,t,i=0){for(var n="<"+Array.from(e.values()).join(""),a=f.unpack_from(n,t,i),s=Array.from(e.keys()),r=new Map,o=0;o<s.length;o++)r.set(s[o],a[o]);return r}function o(e){e||e()}function l(e){var t="<"+Array.from(e.values()).join("");return f.calcsize(t)}function h(e,t=8){return Math.ceil(e/t)*t}var _={u:"Uint",i:"Int",f:"Float"};function d(e){var t,i,n=f._is_big_endian(e);if(/S/.test(e))t="getString",i=0|((e.match(/S(\d*)/)||[])[1]||1);else{let[n,a,s]=e.match(/[<>=!@]?(i|u|f)(\d*)/),r=8*(i=parseInt(s||4,10));t="get"+_[a]+r.toFixed()}return[t,n,i]}const f=new class{constructor(){this.big_endian=function(){const e=new Uint8Array(4);return!((new Uint32Array(e.buffer)[0]=1)&e[0])}(),this.getters={s:"getUint8",b:"getInt8",B:"getUint8",h:"getInt16",H:"getUint16",i:"getInt32",I:"getUint32",l:"getInt32",L:"getUint32",q:"getInt64",Q:"getUint64",f:"getFloat32",d:"getFloat64"},this.byte_lengths={s:1,b:1,B:1,h:2,H:2,i:4,I:4,l:4,L:4,q:8,Q:8,f:4,d:8};let e=Object.keys(this.byte_lengths).join("");this.fmt_size_regex="(\\d*)(["+e+"])"}calcsize(e){for(var t,i=0,n=new RegExp(this.fmt_size_regex,"g");null!==(t=n.exec(e));){let e=parseInt(t[1]||1,10),n=t[2];i+=e*this.byte_lengths[n]}return i}_is_big_endian(e){return!/^</.test(e)&&(!!/^(!|>)/.test(e)||this.big_endian)}unpack_from(e,t,i){i=i||0;for(var n,a=new c(t,0),s=[],r=this._is_big_endian(e),o=new RegExp(this.fmt_size_regex,"g");null!==(n=o.exec(e));){let e=parseInt(n[1]||1,10),t=n[2],o=this.getters[t],d=this.byte_lengths[t];var l;if("s"==t){var h=new Array;l=h}else l=s;for(var _=0;_<e;_++)l.push(a[o](i,!r)),i+=d;"s"==t&&s.push(h.reduce((function(e,t){return e+String.fromCharCode(t)}),""))}return s}};var u=!1;class c extends DataView{getUint64(e,t){const i=this.getUint32(e,t),n=this.getUint32(e+4,t),a=t?i+2**32*n:2**32*i+n;return u&&!Number.isSafeInteger(a)&&console.warn(a,"exceeds MAX_SAFE_INTEGER. Precision may be lost"),a}getInt64(e,t){var i,n;t?(i=this.getUint32(e,!0),n=this.getInt32(e+4,!0)):(n=this.getInt32(e,!1),i=this.getUint32(e+4,!1));const a=i+4294967296*n;return u&&!Number.isSafeInteger(a)&&console.warn(a,"exceeds MAX_SAFE_INTEGER or MIN_SAFE_INTEGER. Precision may be lost"),a}getString(e,t,i){for(var n="",a=0;a<i;a++){let t=this.getUint8(e+a);t&&(n+=String.fromCharCode(t))}return decodeURIComponent(escape(n))}getVLENStruct(e,t,i){return[this.getUint32(e,t),this.getUint64(e+4,t),this.getUint32(e+12,t)]}generate_getFixedString(e){return function(t,i){for(var n="",a=0;a<e;a++)n+=String.fromCharCode(this.getUint8(offset));return n}.bind(this)}}new Map([["item_size","I"],["collection_address","Q"],["object_index","I"]]);class g{constructor(e,t){this.buf=e,this.offset=t,this.dtype=this.determine_dtype()}determine_dtype(){let e=r(p,this.buf,this.offset);this.offset+=m;let t=15&e.get("class_and_version");if(t==v)return this._determine_dtype_fixed_point(e);if(t==b)return this._determine_dtype_floating_point(e);if(t==w)throw"Time datatype class not supported.";if(t==k)return this._determine_dtype_string(e);if(t==y)throw"Bitfield datatype class not supported.";if(t==x)throw"Opaque datatype class not supported.";if(t==z)return this._determine_dtype_compound(e);if(t==E)return["REFERENCE",e.get("size")];if(t==B)throw"Enumerated datatype class not supported.";if(t==S)throw"Array datatype class not supported.";if(t==I){let t=this._determine_dtype_vlen(e);if("VLEN_SEQUENCE"==t[0]){t=["VLEN_SEQUENCE",this.determine_dtype()]}return t}throw"Invalid datatype class "+t}_determine_dtype_fixed_point(e){let t=e.get("size");if(![1,2,4,8].includes(t))throw"Unsupported datatype size";var i;var n;return i=(8&e.get("class_bit_field_0"))>0?"i":"u",n=0==(1&e.get("class_bit_field_0"))?"<":">",this.offset+=4,n+i+t.toFixed()}_determine_dtype_floating_point(e){let t=e.get("size");if(![1,2,4,8].includes(t))throw"Unsupported datatype size";var i;return i=0==(1&e.get("class_bit_field_0"))?"<":">",this.offset+=12,i+"f"+t.toFixed()}_determine_dtype_string(e){return"S"+e.get("size").toFixed()}_determine_dtype_vlen(e){return 1!=(1&e.get("class_bit_field_0"))?["VLEN_SEQUENCE",0,0]:["VLEN_STRING",e.get("class_bit_field_0")>>4,1&e.get("class_bit_field_1")]}_determine_dtype_compound(e){throw"not yet implemented!"}}var p=new Map([["class_and_version","B"],["class_bit_field_0","B"],["class_bit_field_1","B"],["class_bit_field_2","B"],["size","I"]]),m=l(p),v=(l(new Map([["offset","I"],["dimensionality","B"],["reserved_0","B"],["reserved_1","B"],["reserved_2","B"],["permutation","I"],["reserved_3","I"],["dim_size_1","I"],["dim_size_2","I"],["dim_size_3","I"],["dim_size_4","I"]])),0),b=1,w=2,k=3,y=4,x=5,z=6,E=7,B=8,I=9,S=10,A="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function N(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function j(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var i=t.shift();if(i){if("object"!=typeof i)throw new TypeError(i+"must be non-object");for(var n in i)N(i,n)&&(e[n]=i[n])}}return e}function U(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)}var F={arraySet:function(e,t,i,n,a){for(var s=0;s<n;s++)e[a+s]=t[i+s]},flattenChunks:function(e){return[].concat.apply([],e)}};const R={};A?j(R,{arraySet:function(e,t,i,n,a){if(t.subarray&&e.subarray)e.set(t.subarray(i,i+n),a);else for(var s=0;s<n;s++)e[a+s]=t[i+s]},flattenChunks:function(e){var t,i,n,a,s,r;for(n=0,t=0,i=e.length;t<i;t++)n+=e[t].length;for(r=new Uint8Array(n),a=0,t=0,i=e.length;t<i;t++)s=e[t],r.set(s,a),a+=s.length;return r}},{Buf8:Uint8Array,Buf16:Uint16Array,Buf32:Int32Array}):j(R,F,{Buf8:Array,Buf16:Array,Buf32:Array});let C=R.Buf8,M=R.Buf16,O=R.Buf32,H=R.arraySet,Z=R.flattenChunks;var Q=4,L=0,T=1,D=2;function P(e){for(var t=e.length;--t>=0;)e[t]=0}var V=0,G=1,K=2,Y=29,X=256,$=X+1+Y,q=30,J=19,W=2*$+1,ee=15,te=16,ie=7,ne=256,ae=16,se=17,re=18,oe=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],le=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],he=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],_e=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],de=new Array(2*($+2));P(de);var fe=new Array(2*q);P(fe);var ue=new Array(512);P(ue);var ce=new Array(256);P(ce);var ge=new Array(Y);P(ge);var pe,me,ve,be=new Array(q);function we(e,t,i,n,a){this.static_tree=e,this.extra_bits=t,this.extra_base=i,this.elems=n,this.max_length=a,this.has_stree=e&&e.length}function ke(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function ye(e){return e<256?ue[e]:ue[256+(e>>>7)]}function xe(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function ze(e,t,i){e.bi_valid>te-i?(e.bi_buf|=t<<e.bi_valid&65535,xe(e,e.bi_buf),e.bi_buf=t>>te-e.bi_valid,e.bi_valid+=i-te):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=i)}function Ee(e,t,i){ze(e,i[2*t],i[2*t+1])}function Be(e,t){var i=0;do{i|=1&e,e>>>=1,i<<=1}while(--t>0);return i>>>1}function Ie(e,t,i){var n,a,s=new Array(ee+1),r=0;for(n=1;n<=ee;n++)s[n]=r=r+i[n-1]<<1;for(a=0;a<=t;a++){var o=e[2*a+1];0!==o&&(e[2*a]=Be(s[o]++,o))}}function Se(e){var t;for(t=0;t<$;t++)e.dyn_ltree[2*t]=0;for(t=0;t<q;t++)e.dyn_dtree[2*t]=0;for(t=0;t<J;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*ne]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function Ae(e){e.bi_valid>8?xe(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function Ne(e,t,i,n){var a=2*t,s=2*i;return e[a]<e[s]||e[a]===e[s]&&n[t]<=n[i]}function je(e,t,i){for(var n=e.heap[i],a=i<<1;a<=e.heap_len&&(a<e.heap_len&&Ne(t,e.heap[a+1],e.heap[a],e.depth)&&a++,!Ne(t,n,e.heap[a],e.depth));)e.heap[i]=e.heap[a],i=a,a<<=1;e.heap[i]=n}function Ue(e,t,i){var n,a,s,r,o=0;if(0!==e.last_lit)do{n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],a=e.pending_buf[e.l_buf+o],o++,0===n?Ee(e,a,t):(Ee(e,(s=ce[a])+X+1,t),0!==(r=oe[s])&&ze(e,a-=ge[s],r),Ee(e,s=ye(--n),i),0!==(r=le[s])&&ze(e,n-=be[s],r))}while(o<e.last_lit);Ee(e,ne,t)}function Fe(e,t){var i,n,a,s=t.dyn_tree,r=t.stat_desc.static_tree,o=t.stat_desc.has_stree,l=t.stat_desc.elems,h=-1;for(e.heap_len=0,e.heap_max=W,i=0;i<l;i++)0!==s[2*i]?(e.heap[++e.heap_len]=h=i,e.depth[i]=0):s[2*i+1]=0;for(;e.heap_len<2;)s[2*(a=e.heap[++e.heap_len]=h<2?++h:0)]=1,e.depth[a]=0,e.opt_len--,o&&(e.static_len-=r[2*a+1]);for(t.max_code=h,i=e.heap_len>>1;i>=1;i--)je(e,s,i);a=l;do{i=e.heap[1],e.heap[1]=e.heap[e.heap_len--],je(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=i,e.heap[--e.heap_max]=n,s[2*a]=s[2*i]+s[2*n],e.depth[a]=(e.depth[i]>=e.depth[n]?e.depth[i]:e.depth[n])+1,s[2*i+1]=s[2*n+1]=a,e.heap[1]=a++,je(e,s,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var i,n,a,s,r,o,l=t.dyn_tree,h=t.max_code,_=t.stat_desc.static_tree,d=t.stat_desc.has_stree,f=t.stat_desc.extra_bits,u=t.stat_desc.extra_base,c=t.stat_desc.max_length,g=0;for(s=0;s<=ee;s++)e.bl_count[s]=0;for(l[2*e.heap[e.heap_max]+1]=0,i=e.heap_max+1;i<W;i++)(s=l[2*l[2*(n=e.heap[i])+1]+1]+1)>c&&(s=c,g++),l[2*n+1]=s,n>h||(e.bl_count[s]++,r=0,n>=u&&(r=f[n-u]),o=l[2*n],e.opt_len+=o*(s+r),d&&(e.static_len+=o*(_[2*n+1]+r)));if(0!==g){do{for(s=c-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[c]--,g-=2}while(g>0);for(s=c;0!==s;s--)for(n=e.bl_count[s];0!==n;)(a=e.heap[--i])>h||(l[2*a+1]!==s&&(e.opt_len+=(s-l[2*a+1])*l[2*a],l[2*a+1]=s),n--)}}(e,t),Ie(s,h,e.bl_count)}function Re(e,t,i){var n,a,s=-1,r=t[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),t[2*(i+1)+1]=65535,n=0;n<=i;n++)a=r,r=t[2*(n+1)+1],++o<l&&a===r||(o<h?e.bl_tree[2*a]+=o:0!==a?(a!==s&&e.bl_tree[2*a]++,e.bl_tree[2*ae]++):o<=10?e.bl_tree[2*se]++:e.bl_tree[2*re]++,o=0,s=a,0===r?(l=138,h=3):a===r?(l=6,h=3):(l=7,h=4))}function Ce(e,t,i){var n,a,s=-1,r=t[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),n=0;n<=i;n++)if(a=r,r=t[2*(n+1)+1],!(++o<l&&a===r)){if(o<h)do{Ee(e,a,e.bl_tree)}while(0!=--o);else 0!==a?(a!==s&&(Ee(e,a,e.bl_tree),o--),Ee(e,ae,e.bl_tree),ze(e,o-3,2)):o<=10?(Ee(e,se,e.bl_tree),ze(e,o-3,3)):(Ee(e,re,e.bl_tree),ze(e,o-11,7));o=0,s=a,0===r?(l=138,h=3):a===r?(l=6,h=3):(l=7,h=4)}}P(be);var Me=!1;function Oe(e){Me||(!function(){var e,t,i,n,a,s=new Array(ee+1);for(i=0,n=0;n<Y-1;n++)for(ge[n]=i,e=0;e<1<<oe[n];e++)ce[i++]=n;for(ce[i-1]=n,a=0,n=0;n<16;n++)for(be[n]=a,e=0;e<1<<le[n];e++)ue[a++]=n;for(a>>=7;n<q;n++)for(be[n]=a<<7,e=0;e<1<<le[n]-7;e++)ue[256+a++]=n;for(t=0;t<=ee;t++)s[t]=0;for(e=0;e<=143;)de[2*e+1]=8,e++,s[8]++;for(;e<=255;)de[2*e+1]=9,e++,s[9]++;for(;e<=279;)de[2*e+1]=7,e++,s[7]++;for(;e<=287;)de[2*e+1]=8,e++,s[8]++;for(Ie(de,$+1,s),e=0;e<q;e++)fe[2*e+1]=5,fe[2*e]=Be(e,5);pe=new we(de,oe,X+1,$,ee),me=new we(fe,le,0,q,ee),ve=new we(new Array(0),he,0,J,ie)}(),Me=!0),e.l_desc=new ke(e.dyn_ltree,pe),e.d_desc=new ke(e.dyn_dtree,me),e.bl_desc=new ke(e.bl_tree,ve),e.bi_buf=0,e.bi_valid=0,Se(e)}function He(e,t,i,n){ze(e,(V<<1)+(n?1:0),3),function(e,t,i,n){Ae(e),n&&(xe(e,i),xe(e,~i)),H(e.pending_buf,e.window,t,i,e.pending),e.pending+=i}(e,t,i,!0)}function Ze(e){ze(e,G<<1,3),Ee(e,ne,de),function(e){16===e.bi_valid?(xe(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}function Qe(e,t,i,n){var a,s,r=0;e.level>0?(e.strm.data_type===D&&(e.strm.data_type=function(e){var t,i=4093624447;for(t=0;t<=31;t++,i>>>=1)if(1&i&&0!==e.dyn_ltree[2*t])return L;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return T;for(t=32;t<X;t++)if(0!==e.dyn_ltree[2*t])return T;return L}(e)),Fe(e,e.l_desc),Fe(e,e.d_desc),r=function(e){var t;for(Re(e,e.dyn_ltree,e.l_desc.max_code),Re(e,e.dyn_dtree,e.d_desc.max_code),Fe(e,e.bl_desc),t=J-1;t>=3&&0===e.bl_tree[2*_e[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),a=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=a&&(a=s)):a=s=i+5,i+4<=a&&-1!==t?He(e,t,i,n):e.strategy===Q||s===a?(ze(e,(G<<1)+(n?1:0),3),Ue(e,de,fe)):(ze(e,(K<<1)+(n?1:0),3),function(e,t,i,n){var a;for(ze(e,t-257,5),ze(e,i-1,5),ze(e,n-4,4),a=0;a<n;a++)ze(e,e.bl_tree[2*_e[a]+1],3);Ce(e,e.dyn_ltree,t-1),Ce(e,e.dyn_dtree,i-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,r+1),Ue(e,e.dyn_ltree,e.dyn_dtree)),Se(e),n&&Ae(e)}function Le(e,t,i){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&i,e.last_lit++,0===t?e.dyn_ltree[2*i]++:(e.matches++,t--,e.dyn_ltree[2*(ce[i]+X+1)]++,e.dyn_dtree[2*ye(t)]++),e.last_lit===e.lit_bufsize-1}function Te(e,t,i,n){for(var a=65535&e|0,s=e>>>16&65535|0,r=0;0!==i;){i-=r=i>2e3?2e3:i;do{s=s+(a=a+t[n++]|0)|0}while(--r);a%=65521,s%=65521}return a|s<<16|0}var De=function(){for(var e,t=[],i=0;i<256;i++){e=i;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[i]=e}return t}();function Pe(e,t,i,n){var a=De,s=n+i;e^=-1;for(var r=n;r<s;r++)e=e>>>8^a[255&(e^t[r])];return-1^e}var Ve,Ge={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Ke=0,Ye=1,Xe=3,$e=4,qe=5,Je=0,We=1,et=-2,tt=-3,it=-5,nt=-1,at=1,st=2,rt=3,ot=4,lt=2,ht=8,_t=9,dt=286,ft=30,ut=19,ct=2*dt+1,gt=15,pt=3,mt=258,vt=mt+pt+1,bt=32,wt=42,kt=69,yt=73,xt=91,zt=103,Et=113,Bt=666,It=1,St=2,At=3,Nt=4,jt=3;function Ut(e,t){return e.msg=Ge[t],t}function Ft(e){return(e<<1)-(e>4?9:0)}function Rt(e){for(var t=e.length;--t>=0;)e[t]=0}function Ct(e){var t=e.state,i=t.pending;i>e.avail_out&&(i=e.avail_out),0!==i&&(H(e.output,t.pending_buf,t.pending_out,i,e.next_out),e.next_out+=i,t.pending_out+=i,e.total_out+=i,e.avail_out-=i,t.pending-=i,0===t.pending&&(t.pending_out=0))}function Mt(e,t){Qe(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,Ct(e.strm)}function Ot(e,t){e.pending_buf[e.pending++]=t}function Ht(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function Zt(e,t){var i,n,a=e.max_chain_length,s=e.strstart,r=e.prev_length,o=e.nice_match,l=e.strstart>e.w_size-vt?e.strstart-(e.w_size-vt):0,h=e.window,_=e.w_mask,d=e.prev,f=e.strstart+mt,u=h[s+r-1],c=h[s+r];e.prev_length>=e.good_match&&(a>>=2),o>e.lookahead&&(o=e.lookahead);do{if(h[(i=t)+r]===c&&h[i+r-1]===u&&h[i]===h[s]&&h[++i]===h[s+1]){s+=2,i++;do{}while(h[++s]===h[++i]&&h[++s]===h[++i]&&h[++s]===h[++i]&&h[++s]===h[++i]&&h[++s]===h[++i]&&h[++s]===h[++i]&&h[++s]===h[++i]&&h[++s]===h[++i]&&s<f);if(n=mt-(f-s),s=f-mt,n>r){if(e.match_start=t,r=n,n>=o)break;u=h[s+r-1],c=h[s+r]}}}while((t=d[t&_])>l&&0!=--a);return r<=e.lookahead?r:e.lookahead}function Qt(e){var t,i,n,a,s,r,o,l,h,_,d=e.w_size;do{if(a=e.window_size-e.lookahead-e.strstart,e.strstart>=d+(d-vt)){H(e.window,e.window,d,d,0),e.match_start-=d,e.strstart-=d,e.block_start-=d,t=i=e.hash_size;do{n=e.head[--t],e.head[t]=n>=d?n-d:0}while(--i);t=i=d;do{n=e.prev[--t],e.prev[t]=n>=d?n-d:0}while(--i);a+=d}if(0===e.strm.avail_in)break;if(r=e.strm,o=e.window,l=e.strstart+e.lookahead,h=a,_=void 0,(_=r.avail_in)>h&&(_=h),i=0===_?0:(r.avail_in-=_,H(o,r.input,r.next_in,_,l),1===r.state.wrap?r.adler=Te(r.adler,o,_,l):2===r.state.wrap&&(r.adler=Pe(r.adler,o,_,l)),r.next_in+=_,r.total_in+=_,_),e.lookahead+=i,e.lookahead+e.insert>=pt)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+pt-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<pt)););}while(e.lookahead<vt&&0!==e.strm.avail_in)}function Lt(e,t){for(var i,n;;){if(e.lookahead<vt){if(Qt(e),e.lookahead<vt&&t===Ke)return It;if(0===e.lookahead)break}if(i=0,e.lookahead>=pt&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+pt-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==i&&e.strstart-i<=e.w_size-vt&&(e.match_length=Zt(e,i)),e.match_length>=pt)if(n=Le(e,e.strstart-e.match_start,e.match_length-pt),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=pt){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+pt-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=Le(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(Mt(e,!1),0===e.strm.avail_out))return It}return e.insert=e.strstart<pt-1?e.strstart:pt-1,t===$e?(Mt(e,!0),0===e.strm.avail_out?At:Nt):e.last_lit&&(Mt(e,!1),0===e.strm.avail_out)?It:St}function Tt(e,t){for(var i,n,a;;){if(e.lookahead<vt){if(Qt(e),e.lookahead<vt&&t===Ke)return It;if(0===e.lookahead)break}if(i=0,e.lookahead>=pt&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+pt-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=pt-1,0!==i&&e.prev_length<e.max_lazy_match&&e.strstart-i<=e.w_size-vt&&(e.match_length=Zt(e,i),e.match_length<=5&&(e.strategy===at||e.match_length===pt&&e.strstart-e.match_start>4096)&&(e.match_length=pt-1)),e.prev_length>=pt&&e.match_length<=e.prev_length){a=e.strstart+e.lookahead-pt,n=Le(e,e.strstart-1-e.prev_match,e.prev_length-pt),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=a&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+pt-1])&e.hash_mask,i=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=pt-1,e.strstart++,n&&(Mt(e,!1),0===e.strm.avail_out))return It}else if(e.match_available){if((n=Le(e,0,e.window[e.strstart-1]))&&Mt(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return It}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=Le(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<pt-1?e.strstart:pt-1,t===$e?(Mt(e,!0),0===e.strm.avail_out?At:Nt):e.last_lit&&(Mt(e,!1),0===e.strm.avail_out)?It:St}function Dt(e,t,i,n,a){this.good_length=e,this.max_lazy=t,this.nice_length=i,this.max_chain=n,this.func=a}function Pt(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ht,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new M(2*ct),this.dyn_dtree=new M(2*(2*ft+1)),this.bl_tree=new M(2*(2*ut+1)),Rt(this.dyn_ltree),Rt(this.dyn_dtree),Rt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new M(gt+1),this.heap=new M(2*dt+1),Rt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new M(2*dt+1),Rt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Vt(e){var t,i=function(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=lt,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?wt:Et,e.adler=2===t.wrap?0:1,t.last_flush=Ke,Oe(t),Je):Ut(e,et)}(e);return i===Je&&((t=e.state).window_size=2*t.w_size,Rt(t.head),t.max_lazy_match=Ve[t.level].max_lazy,t.good_match=Ve[t.level].good_length,t.nice_match=Ve[t.level].nice_length,t.max_chain_length=Ve[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=pt-1,t.match_available=0,t.ins_h=0),i}function Gt(e,t){var i,n,a,s;if(!e||!e.state||t>qe||t<0)return e?Ut(e,et):et;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||n.status===Bt&&t!==$e)return Ut(e,0===e.avail_out?it:et);if(n.strm=e,i=n.last_flush,n.last_flush=t,n.status===wt)if(2===n.wrap)e.adler=0,Ot(n,31),Ot(n,139),Ot(n,8),n.gzhead?(Ot(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),Ot(n,255&n.gzhead.time),Ot(n,n.gzhead.time>>8&255),Ot(n,n.gzhead.time>>16&255),Ot(n,n.gzhead.time>>24&255),Ot(n,9===n.level?2:n.strategy>=st||n.level<2?4:0),Ot(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(Ot(n,255&n.gzhead.extra.length),Ot(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=Pe(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=kt):(Ot(n,0),Ot(n,0),Ot(n,0),Ot(n,0),Ot(n,0),Ot(n,9===n.level?2:n.strategy>=st||n.level<2?4:0),Ot(n,jt),n.status=Et);else{var r=ht+(n.w_bits-8<<4)<<8;r|=(n.strategy>=st||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(r|=bt),r+=31-r%31,n.status=Et,Ht(n,r),0!==n.strstart&&(Ht(n,e.adler>>>16),Ht(n,65535&e.adler)),e.adler=1}if(n.status===kt)if(n.gzhead.extra){for(a=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>a&&(e.adler=Pe(e.adler,n.pending_buf,n.pending-a,a)),Ct(e),a=n.pending,n.pending!==n.pending_buf_size));)Ot(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>a&&(e.adler=Pe(e.adler,n.pending_buf,n.pending-a,a)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=yt)}else n.status=yt;if(n.status===yt)if(n.gzhead.name){a=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>a&&(e.adler=Pe(e.adler,n.pending_buf,n.pending-a,a)),Ct(e),a=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,Ot(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>a&&(e.adler=Pe(e.adler,n.pending_buf,n.pending-a,a)),0===s&&(n.gzindex=0,n.status=xt)}else n.status=xt;if(n.status===xt)if(n.gzhead.comment){a=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>a&&(e.adler=Pe(e.adler,n.pending_buf,n.pending-a,a)),Ct(e),a=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,Ot(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>a&&(e.adler=Pe(e.adler,n.pending_buf,n.pending-a,a)),0===s&&(n.status=zt)}else n.status=zt;if(n.status===zt&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&Ct(e),n.pending+2<=n.pending_buf_size&&(Ot(n,255&e.adler),Ot(n,e.adler>>8&255),e.adler=0,n.status=Et)):n.status=Et),0!==n.pending){if(Ct(e),0===e.avail_out)return n.last_flush=-1,Je}else if(0===e.avail_in&&Ft(t)<=Ft(i)&&t!==$e)return Ut(e,it);if(n.status===Bt&&0!==e.avail_in)return Ut(e,it);if(0!==e.avail_in||0!==n.lookahead||t!==Ke&&n.status!==Bt){var o=n.strategy===st?function(e,t){for(var i;;){if(0===e.lookahead&&(Qt(e),0===e.lookahead)){if(t===Ke)return It;break}if(e.match_length=0,i=Le(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,i&&(Mt(e,!1),0===e.strm.avail_out))return It}return e.insert=0,t===$e?(Mt(e,!0),0===e.strm.avail_out?At:Nt):e.last_lit&&(Mt(e,!1),0===e.strm.avail_out)?It:St}(n,t):n.strategy===rt?function(e,t){for(var i,n,a,s,r=e.window;;){if(e.lookahead<=mt){if(Qt(e),e.lookahead<=mt&&t===Ke)return It;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=pt&&e.strstart>0&&(n=r[a=e.strstart-1])===r[++a]&&n===r[++a]&&n===r[++a]){s=e.strstart+mt;do{}while(n===r[++a]&&n===r[++a]&&n===r[++a]&&n===r[++a]&&n===r[++a]&&n===r[++a]&&n===r[++a]&&n===r[++a]&&a<s);e.match_length=mt-(s-a),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=pt?(i=Le(e,1,e.match_length-pt),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(i=Le(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),i&&(Mt(e,!1),0===e.strm.avail_out))return It}return e.insert=0,t===$e?(Mt(e,!0),0===e.strm.avail_out?At:Nt):e.last_lit&&(Mt(e,!1),0===e.strm.avail_out)?It:St}(n,t):Ve[n.level].func(n,t);if(o!==At&&o!==Nt||(n.status=Bt),o===It||o===At)return 0===e.avail_out&&(n.last_flush=-1),Je;if(o===St&&(t===Ye?Ze(n):t!==qe&&(He(n,0,0,!1),t===Xe&&(Rt(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),Ct(e),0===e.avail_out))return n.last_flush=-1,Je}return t!==$e?Je:n.wrap<=0?We:(2===n.wrap?(Ot(n,255&e.adler),Ot(n,e.adler>>8&255),Ot(n,e.adler>>16&255),Ot(n,e.adler>>24&255),Ot(n,255&e.total_in),Ot(n,e.total_in>>8&255),Ot(n,e.total_in>>16&255),Ot(n,e.total_in>>24&255)):(Ht(n,e.adler>>>16),Ht(n,65535&e.adler)),Ct(e),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?Je:We)}Ve=[new Dt(0,0,0,0,(function(e,t){var i=65535;for(i>e.pending_buf_size-5&&(i=e.pending_buf_size-5);;){if(e.lookahead<=1){if(Qt(e),0===e.lookahead&&t===Ke)return It;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+i;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,Mt(e,!1),0===e.strm.avail_out))return It;if(e.strstart-e.block_start>=e.w_size-vt&&(Mt(e,!1),0===e.strm.avail_out))return It}return e.insert=0,t===$e?(Mt(e,!0),0===e.strm.avail_out?At:Nt):(e.strstart>e.block_start&&(Mt(e,!1),e.strm.avail_out),It)})),new Dt(4,4,8,4,Lt),new Dt(4,5,16,8,Lt),new Dt(4,6,32,32,Lt),new Dt(4,4,16,16,Tt),new Dt(8,16,32,32,Tt),new Dt(8,16,128,128,Tt),new Dt(8,32,128,256,Tt),new Dt(32,128,258,1024,Tt),new Dt(32,258,258,4096,Tt)];var Kt=!0,Yt=!0;try{String.fromCharCode.apply(null,[0])}catch(e){Kt=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){Yt=!1}for(var Xt=new C(256),$t=0;$t<256;$t++)Xt[$t]=$t>=252?6:$t>=248?5:$t>=240?4:$t>=224?3:$t>=192?2:1;function qt(e){var t,i,n,a,s,r=e.length,o=0;for(a=0;a<r;a++)55296==(64512&(i=e.charCodeAt(a)))&&a+1<r&&56320==(64512&(n=e.charCodeAt(a+1)))&&(i=65536+(i-55296<<10)+(n-56320),a++),o+=i<128?1:i<2048?2:i<65536?3:4;for(t=new C(o),s=0,a=0;s<o;a++)55296==(64512&(i=e.charCodeAt(a)))&&a+1<r&&56320==(64512&(n=e.charCodeAt(a+1)))&&(i=65536+(i-55296<<10)+(n-56320),a++),i<128?t[s++]=i:i<2048?(t[s++]=192|i>>>6,t[s++]=128|63&i):i<65536?(t[s++]=224|i>>>12,t[s++]=128|i>>>6&63,t[s++]=128|63&i):(t[s++]=240|i>>>18,t[s++]=128|i>>>12&63,t[s++]=128|i>>>6&63,t[s++]=128|63&i);return t}function Jt(e,t){if(t<65537&&(e.subarray&&Yt||!e.subarray&&Kt))return String.fromCharCode.apply(null,U(e,t));for(var i="",n=0;n<t;n++)i+=String.fromCharCode(e[n]);return i}function Wt(e,t){var i,n,a,s,r=t||e.length,o=new Array(2*r);for(n=0,i=0;i<r;)if((a=e[i++])<128)o[n++]=a;else if((s=Xt[a])>4)o[n++]=65533,i+=s-1;else{for(a&=2===s?31:3===s?15:7;s>1&&i<r;)a=a<<6|63&e[i++],s--;s>1?o[n++]=65533:a<65536?o[n++]=a:(a-=65536,o[n++]=55296|a>>10&1023,o[n++]=56320|1023&a)}return Jt(o,n)}function ei(e,t){var i;for((t=t||e.length)>e.length&&(t=e.length),i=t-1;i>=0&&128==(192&e[i]);)i--;return i<0?t:0===i?t:i+Xt[e[i]]>t?i:t}function ti(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}Xt[254]=Xt[254]=1;var ii=Object.prototype.toString,ni=0,ai=-1,si=0,ri=8;function oi(e){if(!(this instanceof oi))return new oi(e);this.options=j({level:ai,method:ri,chunkSize:16384,windowBits:15,memLevel:8,strategy:si,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ti,this.strm.avail_out=0;var i,n,a=function(e,t,i,n,a,s){if(!e)return et;var r=1;if(t===nt&&(t=6),n<0?(r=0,n=-n):n>15&&(r=2,n-=16),a<1||a>_t||i!==ht||n<8||n>15||t<0||t>9||s<0||s>ot)return Ut(e,et);8===n&&(n=9);var o=new Pt;return e.state=o,o.strm=e,o.wrap=r,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=a+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+pt-1)/pt),o.window=new C(2*o.w_size),o.head=new M(o.hash_size),o.prev=new M(o.w_size),o.lit_bufsize=1<<a+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new C(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=i,Vt(e)}(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(a!==ni)throw new Error(Ge[a]);if(t.header&&(i=this.strm,n=t.header,i&&i.state&&(2!==i.state.wrap||(i.state.gzhead=n))),t.dictionary){var s;if(s="string"==typeof t.dictionary?qt(t.dictionary):"[object ArrayBuffer]"===ii.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(a=function(e,t){var i,n,a,s,r,o,l,h,_=t.length;if(!e||!e.state)return et;if(2===(s=(i=e.state).wrap)||1===s&&i.status!==wt||i.lookahead)return et;for(1===s&&(e.adler=Te(e.adler,t,_,0)),i.wrap=0,_>=i.w_size&&(0===s&&(Rt(i.head),i.strstart=0,i.block_start=0,i.insert=0),h=new C(i.w_size),H(h,t,_-i.w_size,i.w_size,0),t=h,_=i.w_size),r=e.avail_in,o=e.next_in,l=e.input,e.avail_in=_,e.next_in=0,e.input=t,Qt(i);i.lookahead>=pt;){n=i.strstart,a=i.lookahead-(pt-1);do{i.ins_h=(i.ins_h<<i.hash_shift^i.window[n+pt-1])&i.hash_mask,i.prev[n&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=n,n++}while(--a);i.strstart=n,i.lookahead=pt-1,Qt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=pt-1,i.match_available=0,e.next_in=o,e.input=l,e.avail_in=r,i.wrap=s,Je}(this.strm,s))!==ni)throw new Error(Ge[a]);this._dict_set=!0}}function li(e,t){var i=new oi(t);if(i.push(e,!0),i.err)throw i.msg||Ge[i.err];return i.result}oi.prototype.push=function(e,t){var i,n,a,s=this.strm,r=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,"string"==typeof e?s.input=qt(e):"[object ArrayBuffer]"===ii.call(e)?s.input=new Uint8Array(e):s.input=e,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new C(r),s.next_out=0,s.avail_out=r),1!==(i=Gt(s,n))&&i!==ni)return this.onEnd(i),this.ended=!0,!1;0!==s.avail_out&&(0!==s.avail_in||4!==n&&2!==n)||("string"===this.options.to?this.onData(Jt(a=U(s.output,s.next_out),a.length)):this.onData(U(s.output,s.next_out)))}while((s.avail_in>0||0===s.avail_out)&&1!==i);return 4===n?(i=function(e){var t;return e&&e.state?(t=e.state.status)!==wt&&t!==kt&&t!==yt&&t!==xt&&t!==zt&&t!==Et&&t!==Bt?Ut(e,et):(e.state=null,t===Et?Ut(e,tt):Je):et}(this.strm),this.onEnd(i),this.ended=!0,i===ni):2!==n||(this.onEnd(ni),s.avail_out=0,!0)},oi.prototype.onData=function(e){this.chunks.push(e)},oi.prototype.onEnd=function(e){e===ni&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=Z(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};var hi=Object.freeze({Deflate:oi,deflate:li,deflateRaw:function(e,t){return(t=t||{}).raw=!0,li(e,t)},gzip:function(e,t){return(t=t||{}).gzip=!0,li(e,t)}}),_i=30,di=12;function fi(e,t){var i,n,a,s,r,o,l,h,_,d,f,u,c,g,p,m,v,b,w,k,y,x,z,E,B;i=e.state,n=e.next_in,E=e.input,a=n+(e.avail_in-5),s=e.next_out,B=e.output,r=s-(t-e.avail_out),o=s+(e.avail_out-257),l=i.dmax,h=i.wsize,_=i.whave,d=i.wnext,f=i.window,u=i.hold,c=i.bits,g=i.lencode,p=i.distcode,m=(1<<i.lenbits)-1,v=(1<<i.distbits)-1;e:do{c<15&&(u+=E[n++]<<c,c+=8,u+=E[n++]<<c,c+=8),b=g[u&m];t:for(;;){if(u>>>=w=b>>>24,c-=w,0===(w=b>>>16&255))B[s++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=g[(65535&b)+(u&(1<<w)-1)];continue t}if(32&w){i.mode=di;break e}e.msg="invalid literal/length code",i.mode=_i;break e}k=65535&b,(w&=15)&&(c<w&&(u+=E[n++]<<c,c+=8),k+=u&(1<<w)-1,u>>>=w,c-=w),c<15&&(u+=E[n++]<<c,c+=8,u+=E[n++]<<c,c+=8),b=p[u&v];i:for(;;){if(u>>>=w=b>>>24,c-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=p[(65535&b)+(u&(1<<w)-1)];continue i}e.msg="invalid distance code",i.mode=_i;break e}if(y=65535&b,c<(w&=15)&&(u+=E[n++]<<c,(c+=8)<w&&(u+=E[n++]<<c,c+=8)),(y+=u&(1<<w)-1)>l){e.msg="invalid distance too far back",i.mode=_i;break e}if(u>>>=w,c-=w,y>(w=s-r)){if((w=y-w)>_&&i.sane){e.msg="invalid distance too far back",i.mode=_i;break e}if(x=0,z=f,0===d){if(x+=h-w,w<k){k-=w;do{B[s++]=f[x++]}while(--w);x=s-y,z=B}}else if(d<w){if(x+=h+d-w,(w-=d)<k){k-=w;do{B[s++]=f[x++]}while(--w);if(x=0,d<k){k-=w=d;do{B[s++]=f[x++]}while(--w);x=s-y,z=B}}}else if(x+=d-w,w<k){k-=w;do{B[s++]=f[x++]}while(--w);x=s-y,z=B}for(;k>2;)B[s++]=z[x++],B[s++]=z[x++],B[s++]=z[x++],k-=3;k&&(B[s++]=z[x++],k>1&&(B[s++]=z[x++]))}else{x=s-y;do{B[s++]=B[x++],B[s++]=B[x++],B[s++]=B[x++],k-=3}while(k>2);k&&(B[s++]=B[x++],k>1&&(B[s++]=B[x++]))}break}}break}}while(n<a&&s<o);n-=k=c>>3,u&=(1<<(c-=k<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<a?a-n+5:5-(n-a),e.avail_out=s<o?o-s+257:257-(s-o),i.hold=u,i.bits=c}var ui=15,ci=852,gi=592,pi=0,mi=1,vi=2,bi=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],wi=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],ki=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],yi=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];function xi(e,t,i,n,a,s,r,o){var l,h,_,d,f,u,c,g,p,m=o.bits,v=0,b=0,w=0,k=0,y=0,x=0,z=0,E=0,B=0,I=0,S=null,A=0,N=new M(ui+1),j=new M(ui+1),U=null,F=0;for(v=0;v<=ui;v++)N[v]=0;for(b=0;b<n;b++)N[t[i+b]]++;for(y=m,k=ui;k>=1&&0===N[k];k--);if(y>k&&(y=k),0===k)return a[s++]=20971520,a[s++]=20971520,o.bits=1,0;for(w=1;w<k&&0===N[w];w++);for(y<w&&(y=w),E=1,v=1;v<=ui;v++)if(E<<=1,(E-=N[v])<0)return-1;if(E>0&&(e===pi||1!==k))return-1;for(j[1]=0,v=1;v<ui;v++)j[v+1]=j[v]+N[v];for(b=0;b<n;b++)0!==t[i+b]&&(r[j[t[i+b]]++]=b);if(e===pi?(S=U=r,u=19):e===mi?(S=bi,A-=257,U=wi,F-=257,u=256):(S=ki,U=yi,u=-1),I=0,b=0,v=w,f=s,x=y,z=0,_=-1,d=(B=1<<y)-1,e===mi&&B>ci||e===vi&&B>gi)return 1;for(;;){c=v-z,r[b]<u?(g=0,p=r[b]):r[b]>u?(g=U[F+r[b]],p=S[A+r[b]]):(g=96,p=0),l=1<<v-z,w=h=1<<x;do{a[f+(I>>z)+(h-=l)]=c<<24|g<<16|p|0}while(0!==h);for(l=1<<v-1;I&l;)l>>=1;if(0!==l?(I&=l-1,I+=l):I=0,b++,0==--N[v]){if(v===k)break;v=t[i+r[b]]}if(v>y&&(I&d)!==_){for(0===z&&(z=y),f+=w,E=1<<(x=v-z);x+z<k&&!((E-=N[x+z])<=0);)x++,E<<=1;if(B+=1<<x,e===mi&&B>ci||e===vi&&B>gi)return 1;a[_=I&d]=y<<24|x<<16|f-s|0}}return 0!==I&&(a[f+I]=v-z<<24|64<<16|0),o.bits=y,0}var zi=0,Ei=1,Bi=2,Ii=4,Si=5,Ai=6,Ni=0,ji=1,Ui=2,Fi=-2,Ri=-3,Ci=-4,Mi=-5,Oi=8,Hi=1,Zi=2,Qi=3,Li=4,Ti=5,Di=6,Pi=7,Vi=8,Gi=9,Ki=10,Yi=11,Xi=12,$i=13,qi=14,Ji=15,Wi=16,en=17,tn=18,nn=19,an=20,sn=21,rn=22,on=23,ln=24,hn=25,_n=26,dn=27,fn=28,un=29,cn=30,gn=31,pn=32,mn=852,vn=592;function bn(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function wn(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new M(320),this.work=new M(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function kn(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,function(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=Hi,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new O(mn),t.distcode=t.distdyn=new O(vn),t.sane=1,t.back=-1,Ni):Fi}(e)):Fi}function yn(e,t){var i,n;return e?(n=new wn,e.state=n,n.window=null,(i=function(e,t){var i,n;return e&&e.state?(n=e.state,t<0?(i=0,t=-t):(i=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?Fi:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=i,n.wbits=t,kn(e))):Fi}(e,t))!==Ni&&(e.state=null),i):Fi}var xn,zn,En=!0;function Bn(e){if(En){var t;for(xn=new O(512),zn=new O(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(xi(Ei,e.lens,0,288,xn,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;xi(Bi,e.lens,0,32,zn,0,e.work,{bits:5}),En=!1}e.lencode=xn,e.lenbits=9,e.distcode=zn,e.distbits=5}function In(e,t,i,n){var a,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new C(s.wsize)),n>=s.wsize?(H(s.window,t,i-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):((a=s.wsize-s.wnext)>n&&(a=n),H(s.window,t,i-n,a,s.wnext),(n-=a)?(H(s.window,t,i-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=a,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=a))),0}function Sn(e,t){var i,n,a,s,r,o,l,h,_,d,f,u,c,g,p,m,v,b,w,k,y,x,z,E,B=0,I=new C(4),S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return Fi;(i=e.state).mode===Xi&&(i.mode=$i),r=e.next_out,a=e.output,l=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,h=i.hold,_=i.bits,d=o,f=l,x=Ni;e:for(;;)switch(i.mode){case Hi:if(0===i.wrap){i.mode=$i;break}for(;_<16;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if(2&i.wrap&&35615===h){i.check=0,I[0]=255&h,I[1]=h>>>8&255,i.check=Pe(i.check,I,2,0),h=0,_=0,i.mode=Zi;break}if(i.flags=0,i.head&&(i.head.done=!1),!(1&i.wrap)||(((255&h)<<8)+(h>>8))%31){e.msg="incorrect header check",i.mode=cn;break}if((15&h)!==Oi){e.msg="unknown compression method",i.mode=cn;break}if(_-=4,y=8+(15&(h>>>=4)),0===i.wbits)i.wbits=y;else if(y>i.wbits){e.msg="invalid window size",i.mode=cn;break}i.dmax=1<<y,e.adler=i.check=1,i.mode=512&h?Ki:Xi,h=0,_=0;break;case Zi:for(;_<16;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if(i.flags=h,(255&i.flags)!==Oi){e.msg="unknown compression method",i.mode=cn;break}if(57344&i.flags){e.msg="unknown header flags set",i.mode=cn;break}i.head&&(i.head.text=h>>8&1),512&i.flags&&(I[0]=255&h,I[1]=h>>>8&255,i.check=Pe(i.check,I,2,0)),h=0,_=0,i.mode=Qi;case Qi:for(;_<32;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}i.head&&(i.head.time=h),512&i.flags&&(I[0]=255&h,I[1]=h>>>8&255,I[2]=h>>>16&255,I[3]=h>>>24&255,i.check=Pe(i.check,I,4,0)),h=0,_=0,i.mode=Li;case Li:for(;_<16;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}i.head&&(i.head.xflags=255&h,i.head.os=h>>8),512&i.flags&&(I[0]=255&h,I[1]=h>>>8&255,i.check=Pe(i.check,I,2,0)),h=0,_=0,i.mode=Ti;case Ti:if(1024&i.flags){for(;_<16;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}i.length=h,i.head&&(i.head.extra_len=h),512&i.flags&&(I[0]=255&h,I[1]=h>>>8&255,i.check=Pe(i.check,I,2,0)),h=0,_=0}else i.head&&(i.head.extra=null);i.mode=Di;case Di:if(1024&i.flags&&((u=i.length)>o&&(u=o),u&&(i.head&&(y=i.head.extra_len-i.length,i.head.extra||(i.head.extra=new Array(i.head.extra_len)),H(i.head.extra,n,s,u,y)),512&i.flags&&(i.check=Pe(i.check,n,u,s)),o-=u,s+=u,i.length-=u),i.length))break e;i.length=0,i.mode=Pi;case Pi:if(2048&i.flags){if(0===o)break e;u=0;do{y=n[s+u++],i.head&&y&&i.length<65536&&(i.head.name+=String.fromCharCode(y))}while(y&&u<o);if(512&i.flags&&(i.check=Pe(i.check,n,u,s)),o-=u,s+=u,y)break e}else i.head&&(i.head.name=null);i.length=0,i.mode=Vi;case Vi:if(4096&i.flags){if(0===o)break e;u=0;do{y=n[s+u++],i.head&&y&&i.length<65536&&(i.head.comment+=String.fromCharCode(y))}while(y&&u<o);if(512&i.flags&&(i.check=Pe(i.check,n,u,s)),o-=u,s+=u,y)break e}else i.head&&(i.head.comment=null);i.mode=Gi;case Gi:if(512&i.flags){for(;_<16;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if(h!==(65535&i.check)){e.msg="header crc mismatch",i.mode=cn;break}h=0,_=0}i.head&&(i.head.hcrc=i.flags>>9&1,i.head.done=!0),e.adler=i.check=0,i.mode=Xi;break;case Ki:for(;_<32;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}e.adler=i.check=bn(h),h=0,_=0,i.mode=Yi;case Yi:if(0===i.havedict)return e.next_out=r,e.avail_out=l,e.next_in=s,e.avail_in=o,i.hold=h,i.bits=_,Ui;e.adler=i.check=1,i.mode=Xi;case Xi:if(t===Si||t===Ai)break e;case $i:if(i.last){h>>>=7&_,_-=7&_,i.mode=dn;break}for(;_<3;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}switch(i.last=1&h,_-=1,3&(h>>>=1)){case 0:i.mode=qi;break;case 1:if(Bn(i),i.mode=an,t===Ai){h>>>=2,_-=2;break e}break;case 2:i.mode=en;break;case 3:e.msg="invalid block type",i.mode=cn}h>>>=2,_-=2;break;case qi:for(h>>>=7&_,_-=7&_;_<32;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if((65535&h)!=(h>>>16^65535)){e.msg="invalid stored block lengths",i.mode=cn;break}if(i.length=65535&h,h=0,_=0,i.mode=Ji,t===Ai)break e;case Ji:i.mode=Wi;case Wi:if(u=i.length){if(u>o&&(u=o),u>l&&(u=l),0===u)break e;H(a,n,s,u,r),o-=u,s+=u,l-=u,r+=u,i.length-=u;break}i.mode=Xi;break;case en:for(;_<14;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if(i.nlen=257+(31&h),h>>>=5,_-=5,i.ndist=1+(31&h),h>>>=5,_-=5,i.ncode=4+(15&h),h>>>=4,_-=4,i.nlen>286||i.ndist>30){e.msg="too many length or distance symbols",i.mode=cn;break}i.have=0,i.mode=tn;case tn:for(;i.have<i.ncode;){for(;_<3;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}i.lens[S[i.have++]]=7&h,h>>>=3,_-=3}for(;i.have<19;)i.lens[S[i.have++]]=0;if(i.lencode=i.lendyn,i.lenbits=7,z={bits:i.lenbits},x=xi(zi,i.lens,0,19,i.lencode,0,i.work,z),i.lenbits=z.bits,x){e.msg="invalid code lengths set",i.mode=cn;break}i.have=0,i.mode=nn;case nn:for(;i.have<i.nlen+i.ndist;){for(;m=(B=i.lencode[h&(1<<i.lenbits)-1])>>>16&255,v=65535&B,!((p=B>>>24)<=_);){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if(v<16)h>>>=p,_-=p,i.lens[i.have++]=v;else{if(16===v){for(E=p+2;_<E;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if(h>>>=p,_-=p,0===i.have){e.msg="invalid bit length repeat",i.mode=cn;break}y=i.lens[i.have-1],u=3+(3&h),h>>>=2,_-=2}else if(17===v){for(E=p+3;_<E;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}_-=p,y=0,u=3+(7&(h>>>=p)),h>>>=3,_-=3}else{for(E=p+7;_<E;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}_-=p,y=0,u=11+(127&(h>>>=p)),h>>>=7,_-=7}if(i.have+u>i.nlen+i.ndist){e.msg="invalid bit length repeat",i.mode=cn;break}for(;u--;)i.lens[i.have++]=y}}if(i.mode===cn)break;if(0===i.lens[256]){e.msg="invalid code -- missing end-of-block",i.mode=cn;break}if(i.lenbits=9,z={bits:i.lenbits},x=xi(Ei,i.lens,0,i.nlen,i.lencode,0,i.work,z),i.lenbits=z.bits,x){e.msg="invalid literal/lengths set",i.mode=cn;break}if(i.distbits=6,i.distcode=i.distdyn,z={bits:i.distbits},x=xi(Bi,i.lens,i.nlen,i.ndist,i.distcode,0,i.work,z),i.distbits=z.bits,x){e.msg="invalid distances set",i.mode=cn;break}if(i.mode=an,t===Ai)break e;case an:i.mode=sn;case sn:if(o>=6&&l>=258){e.next_out=r,e.avail_out=l,e.next_in=s,e.avail_in=o,i.hold=h,i.bits=_,fi(e,f),r=e.next_out,a=e.output,l=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,h=i.hold,_=i.bits,i.mode===Xi&&(i.back=-1);break}for(i.back=0;m=(B=i.lencode[h&(1<<i.lenbits)-1])>>>16&255,v=65535&B,!((p=B>>>24)<=_);){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if(m&&0==(240&m)){for(b=p,w=m,k=v;m=(B=i.lencode[k+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&B,!(b+(p=B>>>24)<=_);){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}h>>>=b,_-=b,i.back+=b}if(h>>>=p,_-=p,i.back+=p,i.length=v,0===m){i.mode=_n;break}if(32&m){i.back=-1,i.mode=Xi;break}if(64&m){e.msg="invalid literal/length code",i.mode=cn;break}i.extra=15&m,i.mode=rn;case rn:if(i.extra){for(E=i.extra;_<E;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}i.length+=h&(1<<i.extra)-1,h>>>=i.extra,_-=i.extra,i.back+=i.extra}i.was=i.length,i.mode=on;case on:for(;m=(B=i.distcode[h&(1<<i.distbits)-1])>>>16&255,v=65535&B,!((p=B>>>24)<=_);){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if(0==(240&m)){for(b=p,w=m,k=v;m=(B=i.distcode[k+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&B,!(b+(p=B>>>24)<=_);){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}h>>>=b,_-=b,i.back+=b}if(h>>>=p,_-=p,i.back+=p,64&m){e.msg="invalid distance code",i.mode=cn;break}i.offset=v,i.extra=15&m,i.mode=ln;case ln:if(i.extra){for(E=i.extra;_<E;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}i.offset+=h&(1<<i.extra)-1,h>>>=i.extra,_-=i.extra,i.back+=i.extra}if(i.offset>i.dmax){e.msg="invalid distance too far back",i.mode=cn;break}i.mode=hn;case hn:if(0===l)break e;if(u=f-l,i.offset>u){if((u=i.offset-u)>i.whave&&i.sane){e.msg="invalid distance too far back",i.mode=cn;break}u>i.wnext?(u-=i.wnext,c=i.wsize-u):c=i.wnext-u,u>i.length&&(u=i.length),g=i.window}else g=a,c=r-i.offset,u=i.length;u>l&&(u=l),l-=u,i.length-=u;do{a[r++]=g[c++]}while(--u);0===i.length&&(i.mode=sn);break;case _n:if(0===l)break e;a[r++]=i.length,l--,i.mode=sn;break;case dn:if(i.wrap){for(;_<32;){if(0===o)break e;o--,h|=n[s++]<<_,_+=8}if(f-=l,e.total_out+=f,i.total+=f,f&&(e.adler=i.check=i.flags?Pe(i.check,a,f,r-f):Te(i.check,a,f,r-f)),f=l,(i.flags?h:bn(h))!==i.check){e.msg="incorrect data check",i.mode=cn;break}h=0,_=0}i.mode=fn;case fn:if(i.wrap&&i.flags){for(;_<32;){if(0===o)break e;o--,h+=n[s++]<<_,_+=8}if(h!==(4294967295&i.total)){e.msg="incorrect length check",i.mode=cn;break}h=0,_=0}i.mode=un;case un:x=ji;break e;case cn:x=Ri;break e;case gn:return Ci;case pn:default:return Fi}return e.next_out=r,e.avail_out=l,e.next_in=s,e.avail_in=o,i.hold=h,i.bits=_,(i.wsize||f!==e.avail_out&&i.mode<cn&&(i.mode<dn||t!==Ii))&&In(e,e.output,e.next_out,f-e.avail_out),d-=e.avail_in,f-=e.avail_out,e.total_in+=d,e.total_out+=f,i.total+=f,i.wrap&&f&&(e.adler=i.check=i.flags?Pe(i.check,a,f,e.next_out-f):Te(i.check,a,f,e.next_out-f)),e.data_type=i.bits+(i.last?64:0)+(i.mode===Xi?128:0)+(i.mode===an||i.mode===Ji?256:0),(0===d&&0===f||t===Ii)&&x===Ni&&(x=Mi),x}function An(e,t){var i,n=t.length;return e&&e.state?0!==(i=e.state).wrap&&i.mode!==Yi?Fi:i.mode===Yi&&Te(1,t,n,0)!==i.check?Ri:In(e,t,n,n)?(i.mode=gn,Ci):(i.havedict=1,Ni):Fi}var Nn={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};function jn(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var Un=Object.prototype.toString;function Fn(e){if(!(this instanceof Fn))return new Fn(e);this.options=j({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ti,this.strm.avail_out=0;var i,n,a,s=yn(this.strm,t.windowBits);if(s!==Nn.Z_OK)throw new Error(Ge[s]);this.header=new jn,i=this.strm,n=this.header,i&&i.state&&(0==(2&(a=i.state).wrap)||(a.head=n,n.done=!1))}function Rn(e,t){var i=new Fn(t);if(i.push(e,!0),i.err)throw i.msg||Ge[i.err];return i.result}Fn.prototype.push=function(e,t){var i,n,a,s,r,o,l=this.strm,h=this.options.chunkSize,_=this.options.dictionary,d=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?Nn.Z_FINISH:Nn.Z_NO_FLUSH,"string"==typeof e?l.input=function(e){for(var t=new C(e.length),i=0,n=t.length;i<n;i++)t[i]=e.charCodeAt(i);return t}(e):"[object ArrayBuffer]"===Un.call(e)?l.input=new Uint8Array(e):l.input=e,l.next_in=0,l.avail_in=l.input.length;do{if(0===l.avail_out&&(l.output=new C(h),l.next_out=0,l.avail_out=h),(i=Sn(l,Nn.Z_NO_FLUSH))===Nn.Z_NEED_DICT&&_&&(o="string"==typeof _?qt(_):"[object ArrayBuffer]"===Un.call(_)?new Uint8Array(_):_,i=An(this.strm,o)),i===Nn.Z_BUF_ERROR&&!0===d&&(i=Nn.Z_OK,d=!1),i!==Nn.Z_STREAM_END&&i!==Nn.Z_OK)return this.onEnd(i),this.ended=!0,!1;l.next_out&&(0!==l.avail_out&&i!==Nn.Z_STREAM_END&&(0!==l.avail_in||n!==Nn.Z_FINISH&&n!==Nn.Z_SYNC_FLUSH)||("string"===this.options.to?(a=ei(l.output,l.next_out),s=l.next_out-a,r=Wt(l.output,a),l.next_out=s,l.avail_out=h-s,s&&H(l.output,l.output,a,s,0),this.onData(r)):this.onData(U(l.output,l.next_out)))),0===l.avail_in&&0===l.avail_out&&(d=!0)}while((l.avail_in>0||0===l.avail_out)&&i!==Nn.Z_STREAM_END);return i===Nn.Z_STREAM_END&&(n=Nn.Z_FINISH),n===Nn.Z_FINISH?(i=function(e){if(!e||!e.state)return Fi;var t=e.state;return t.window&&(t.window=null),e.state=null,Ni}(this.strm),this.onEnd(i),this.ended=!0,i===Nn.Z_OK):n!==Nn.Z_SYNC_FLUSH||(this.onEnd(Nn.Z_OK),l.avail_out=0,!0)},Fn.prototype.onData=function(e){this.chunks.push(e)},Fn.prototype.onEnd=function(e){e===Nn.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=Z(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};const Cn={};j(Cn,hi,Object.freeze({Inflate:Fn,inflate:Rn,inflateRaw:function(e,t){return(t=t||{}).raw=!0,Rn(e,t)},ungzip:Rn}),Nn);var Mn=Cn;const On={decompress:function(e){let t=new Uint8Array(e);return Mn.inflate(t).buffer}};class Hn{constructor(e,t){this.fh=e;let i=this._read_node(t);this.root_node=i;var n=new Map,a=i.get("node_level");for(n.set(a,[i]);0!=a;){var s=[];for(var r of n.get(a))for(var o of r.get("addresses"))s.push(this._read_node(o));let e=s[0].get("node_level");n.set(e,s),a=e}this.all_nodes=n}_read_node(e){let t=r(Ln,this.fh,e);e+=l(Ln);for(var i=[],n=[],a=t.get("entries_used"),s=0;s<a;s++){let[t,a]=f.unpack_from("<II",this.fh,e);e+=8;let[s,r]=f.unpack_from("<II",this.fh,e);e+=8,i.push(t),n.push(s)}return i.push(f.unpack_from("<I",this.fh,e)[0]),t.set("keys",i),t.set("addresses",n),t}symbol_table_addresses(){var e=[],t=this.all_nodes.get(0);for(var i of t)e=e.concat(i.get("addresses"));return e}}class Zn{constructor(e,t,i){this.fh=e,this.dims=i;var n=this._read_node(t);this.root_node=n;var a={},s=n.get("node_level");for(a[s]=[n];0!=s;){let e=[];for(var r of a[s].values())for(var o of r.get("addresses"))e.push(this._read_node(o));let t=e[0].get("node_level");a[t]=e,s=t}this.all_nodes=a}_read_node(e){let t=r(Ln,this.fh,e);e+=l(Ln);var i=[],n=[];let a=t.get("entries_used");for(var s=0;s<a;s++){let[t,a]=f.unpack_from("<II",this.fh,e);e+=8;let s="<"+this.dims.toFixed()+"Q",r=f.calcsize(s),o=f.unpack_from(s,this.fh,e);e+=r;let l=f.unpack_from("<Q",this.fh,e)[0];e+=8,i.push(new Map([["chunk_size",t],["filter_mask",a],["chunk_offset",o]])),n.push(l)}return t.set("keys",i),t.set("addresses",n),t}construct_data_from_chunks(e,t,i,n){var a,s,r;if(i instanceof Array){i;let e=i[0];if("REFERENCE"==e){if(8!=i[1])throw"NotImplementedError('Unsupported Reference type')";i="<u8";a="getUint64",s=!1,r=8}else{if("VLEN_STRING"!=e&&"VLEN_SEQUENCE"!=e)throw"NotImplementedError('datatype not implemented')";a="getVLENStruct",s=!1,r=16}}else null,[a,s,r]=d(i);var o=t.reduce((function(e,t){return e*t}),1),l=e.reduce((function(e,t){return e*t}),1);let h=t.length;var _=1,f=(e.slice().map((function(e){let t=_;return _*=e,t})),_=1,t.slice().reverse().map((function(e){let t=_;return _*=e,t})).reverse()),u=new Array(o);let g=l*r;for(var p of this.all_nodes[0]){let i=p.get("keys"),o=p.get("addresses"),_=i.length;for(var m=0;m<_;m++){let _=i[m],d=o[m];var v;if(null==n)v=this.fh.slice(d,d+g);else{v=this.fh.slice(d,d+_.get("chunk_size"));let e=_.get("filter_mask");v=this._filter_chunk(v,e,n,r)}for(var b=_.get("chunk_offset").slice(),w=b.slice(),k=w.map((function(){return 0})),y=new c(v),x=0;x<l;x++){for(var z=h-1;z>=0&&k[z]>=e[z];z--)k[z]=0,w[z]=b[z],z>0&&(k[z-1]+=1,w[z-1]+=1);if(w.slice(0,-1).every((function(e,i){return e<t[i]}))){let e=x*r,t=y[a](e,!s,r);u[w.slice(0,-1).reduce((function(e,t,i){return t*f[i]+e}),0)]=t}k[h-1]+=1,w[h-1]+=1}}}return u}_filter_chunk(e,t,i,n){let a=i.length;for(var s=e.slice(),r=a-1;r>=0;r--){if(t&1<<r)continue;let e=i[r].get("filter_id");if(e==Tn)s=On.decompress(s);else if(e==Dn){let e=s.byteLength;var o=new Uint8Array(e);let t=Math.floor(e/n),i=new DataView(s);for(var l=0;l<n;l++)for(var h=0;h<t;h++)o[l+h*n]=i.getUint8(l*t+h);s=o.buffer}else{if(e!=Pn)throw'NotImplementedError("Filter with id:'+e.toFixed()+' not supported")';Qn(s),s=s.slice(0,-4)}}return s}}function Qn(e){for(var t=e.byteLength%2!=0,i=e.byteLength-4,n=new c(e),a=0,s=0,r=0;r<i-1;r+=2){s=(s+(a=(a+n.getUint16(r,!0))%65535))%65535}if(t){s=(s+(a=(a+n.getUint8(i-1))%65535))%65535}var[o,l]=f.unpack_from(">HH",e,i);if(l%=65535,a!=(o%=65535)||s!=l)throw'ValueError("fletcher32 checksum invalid")';return!0}var Ln=new Map([["signature","4s"],["node_type","B"],["node_level","B"],["entries_used","H"],["left_sibling","Q"],["right_sibling","Q"]]);const Tn=1,Dn=2,Pn=3;class Vn{constructor(e,t){let i=f.unpack_from("<B",e,t+8);var n;if(0==i)n=r($n,e,t),this._end_of_sblock=t+qn;else{if(2!=i&&3!=i)throw"unsupported superblock version: "+i.toFixed();n=r(Jn,e,t),this._end_of_sblock=t+Wn}if(n.get("format_signature")!=Xn)throw"Incorrect file signature: "+n.get("format_signature");if(8!=n.get("offset_size")||8!=n.get("length_size"))throw"File uses non-64-bit addressing";this.version=n.get("superblock_version"),this._contents=n,this._root_symbol_table=null,this._fh=e}get offset_to_dataobjects(){if(0==this.version){var e=new Kn(this._fh,this._end_of_sblock,!0);return this._root_symbol_table=e,e.group_offset}if(2==this.version||3==this.version)return this._contents.get("root_group_address");throw"Not implemented version = "+this.version.toFixed()}}class Gn{constructor(e,t){let i=r(aa,e,t);o("HEAP"==i.get("signature")),o(0==i.get("version"));let n=i.get("address_of_data_segment"),a=e.slice(n,n+i.get("data_segment_size"));i.set("heap_data",a),this._contents=i,this.data=a}get_object_name(e){let t=new Uint8Array(this.data).indexOf(0,e)-e;return f.unpack_from("<"+t.toFixed()+"s",this.data,e)[0]}}class Kn{constructor(e,t,i=!1){var n;if(i)n=new Map([["symbols",1]]);else{if("SNOD"!=(n=r(ia,e,t)).get("signature"))throw"incorrect node type";t+=na}for(var a=[],s=n.get("symbols"),o=0;o<s;o++)a.push(r(ea,e,t)),t+=ta;i&&(this.group_offset=a[0].get("object_header_address")),this.entries=a,this._contents=n}assign_name(e){this.entries.forEach((function(t){let i=t.get("link_name_offset"),n=e.get_object_name(i);t.set("link_name",n)}))}get_links(){var e={};return this.entries.forEach((function(t){e[t.get("link_name")]=t.get("object_header_address")})),e}}class Yn{constructor(e,t){let i=r(sa,e,t);t+=ra;let n=i.get("collection_size")-ra,a=e.slice(t,t+n);this.heap_data=a,this._header=i,this._objects=null}get objects(){if(null==this._objects){this._objects=new Map;for(var e=0;e<=this.heap_data.byteLength-la;){let t=r(oa,this.heap_data,e);if(0==t.get("object_index"))break;e+=la;let i=this.heap_data.slice(e,e+t.get("object_size"));this._objects.set(t.get("object_index"),i),e+=h(t.get("object_size"))}}return this._objects}}var Xn=f.unpack_from("8s",new Uint8Array([137,72,68,70,13,10,26,10]).buffer)[0],$n=new Map([["format_signature","8s"],["superblock_version","B"],["free_storage_version","B"],["root_group_version","B"],["reserved_0","B"],["shared_header_version","B"],["offset_size","B"],["length_size","B"],["reserved_1","B"],["group_leaf_node_k","H"],["group_internal_node_k","H"],["file_consistency_flags","L"],["base_address_lower","Q"],["free_space_address","Q"],["end_of_file_address","Q"],["driver_information_address","Q"]]),qn=l($n),Jn=new Map([["format_signature","8s"],["superblock_version","B"],["offset_size","B"],["length_size","B"],["file_consistency_flags","B"],["base_address","Q"],["superblock_extension_address","Q"],["end_of_file_address","Q"],["root_group_address","Q"],["superblock_checksum","I"]]),Wn=l(Jn),ea=new Map([["link_name_offset","Q"],["object_header_address","Q"],["cache_type","I"],["reserved","I"],["scratch","16s"]]),ta=l(ea),ia=new Map([["signature","4s"],["version","B"],["reserved_0","B"],["symbols","H"]]),na=l(ia),aa=new Map([["signature","4s"],["version","B"],["reserved","3s"],["data_segment_size","Q"],["offset_to_free_list","Q"],["address_of_data_segment","Q"]]),sa=new Map([["signature","4s"],["version","B"],["reserved","3s"],["collection_size","Q"]]),ra=l(sa),oa=new Map([["object_index","H"],["reference_count","H"],["reserved","I"],["object_size","Q"]]),la=l(oa);class ha{constructor(e,t){let i=f.unpack_from("<B",e,t)[0];if(1==i)var[n,a,s]=this._parse_v1_objects(e,t);else{if(i!="O".charCodeAt(0))throw"InvalidHDF5File('unknown Data Object Header')";var[n,a,s]=this._parse_v2_objects(e,t)}this.fh=e,this.msgs=n,this.msg_data=a,this.offset=t,this._global_heaps={},this._header=s,this._filter_pipeline=null,this._chunk_params_set=!1,this._chunks=null,this._chunk_dims=null,this._chunk_address=null}get dtype(){let e=this.find_msg_type(Ra)[0].get("offset_to_message");return new g(this.fh,e).dtype}get chunks(){return this._get_chunk_params(),this._chunks}get shape(){let e=this.find_msg_type(Fa)[0].get("offset_to_message");return function(e,t){let i=f.unpack_from("<B",e,t)[0];var n;if(1==i)o(1==(n=r(va,e,t)).get("version")),t+=ba;else{if(2!=i)throw"InvalidHDF5File('unknown dataspace message version')";o(2==(n=r(wa,e,t)).get("version")),t+=ka}let a=n.get("dimensionality");return f.unpack_from("<"+(2*a).toFixed()+"I",e,t).filter((function(e,t){return t%2==0}))}(this.fh,e)}get filter_pipeline(){if(null!=this._filter_pipeline)return this._filter_pipeline;let e=this.find_msg_type(Ha);if(!e.length)return this._filter_pipeline=null,this._filter_pipeline;var t=e[0].get("offset_to_message");let[i,n]=f.unpack_from("<BB",this.fh,t);if(t+=f.calcsize("<BB"),1!=i)throw'NotImplementedError("only version 1 filters supported. ")';let[a,s]=f.unpack_from("<HI",this.fh,t);t+=f.calcsize("<HI");for(var o=[],l=0;l<n;l++){let e=r(ja,this.fh,t);t+=Ua;let i=h(e.get("name_length"),8),n="<"+i.toFixed()+"s",a=f.unpack_from(n,this.fh,t)[0];e.set("filter_name",a),t+=i,n="<"+e.get("client_data_values").toFixed()+"I";let s=f.unpack_from(n,this.fh,t);e.set("client_data",s),t+=4*e.get("client_data_values"),e.get("client_data_values")%2&&(t+=4),o.push(e)}return this._filter_pipeline=o,this._filter_pipeline}find_msg_type(e){return this.msgs.filter((function(t){return t.get("type")==e}))}get_attributes(){let e={},t=this.find_msg_type(Za);for(var i of t){let t=i.get("offset_to_message"),[n,a]=this.unpack_attribute(t);e[n]=a}return e}get fillvalue(){var e,t=this.find_msg_type(Ca)[0].get("offset_to_message");let i=f.unpack_from("<B",this.fh,t)[0];var n,a,s;if(1==i||2==i)n=r(Ia,this.fh,t),t+=Sa,e=n.get("fillvalue_defined");else{if(3!=i)throw'InvalidHDF5File("Unknown fillvalue msg version: "'+String(i);n=r(Aa,this.fh,t),t+=Na,e=32&n.get("flags")}if(e?(a=f.unpack_from("<I",this.fh,t)[0],t+=4):a=0,a){let[e,i,n]=d(this.dtype);s=new c(this.fh)[e](t,!i,n)}else s=0;return s}unpack_attribute(e){let t=f.unpack_from("<B",this.fh,e)[0];var i,n;if(1==t)o(1==(i=r(fa,this.fh,e)).get("version")),e+=ua,n=8;else{if(3!=t)throw"unsupported attribute message version: "+t;o(3==(i=r(ca,this.fh,e)).get("version")),e+=ga,n=1}let a=i.get("name_size"),s=f.unpack_from("<"+a.toFixed()+"s",this.fh,e)[0];var l;s=s.replace(/\x00$/,""),e+=h(a,n);try{l=new g(this.fh,e).dtype}catch(e){return console.log("Attribute "+s+" type not implemented, set to null."),[s,null]}e+=h(i.get("datatype_size"),n);let _=this.determine_data_shape(this.fh,e),d=_.reduce((function(e,t){return e*t}),1);e+=h(i.get("dataspace_size"),n);var u=this._attr_value(l,this.fh,d,e);return 0==_.length&&(u=u[0]),[s,u]}determine_data_shape(e,t){let i=f.unpack_from("<B",e,t)[0];var n;if(1==i)o(1==(n=r(va,e,t)).get("version")),t+=ba;else{if(2!=i)throw"unknown dataspace message version";o(2==(n=r(wa,e,t)).get("version")),t+=ka}let a=n.get("dimensionality");return f.unpack_from("<"+a.toFixed()+"Q",e,t)}_attr_value(e,t,i,n){var a=new Array(i);if(e instanceof Array){let d=e[0];for(var s=0;s<i;s++)if("VLEN_STRING"==d){var[r,o,l]=e,[h,_]=this._vlen_size_and_data(t,n);let i="<"+h.toFixed()+"s",d=f.unpack_from(i,_,0)[0];a[s]=0==l?d:decodeURIComponent(escape(d)),n+=16}else if("REFERENCE"==d){var u=f.unpack_from("<Q",t,n);a[s]=u,n+=8}else{if("VLEN_SEQUENCE"!=d)throw"NotImplementedError";{let i=e[1];var[h,_]=this._vlen_size_and_data(t,n);a[s]=this._attr_value(i,_,h,0),n+=16}}}else{let[r,o,l]=d(e),h=new c(t,0);for(s=0;s<i;s++)a[s]=h[r](n,!o,l),n+=l}return a}_vlen_size_and_data(e,t){let i=f.unpack_from("<I",e,t)[0],n=r(da,e,t+4),a=n.get("collection_address");var s;return o(n.get("collection_address")<Number.MAX_SAFE_INTEGER),a in this._global_heaps||(s=new Yn(this.fh,a),this._global_heaps[a]=s),[i,(s=this._global_heaps[a]).objects.get(n.get("object_index"))]}_parse_v1_objects(e,t){let i=r(pa,e,t);o(1==i.get("version"));let n=i.get("total_header_messages");for(var a=i.get("object_header_size"),s=t+l(pa),h=e.slice(s,s+a),_=[[s,a]],d=0,u=0,c=new Array(n),g=0;g<n;g++){u>=a&&([s,a]=_[++d],u=0);let t=r(ya,e,s+u),i=s+u+xa;if(t.set("offset_to_message",i),t.get("type")==Qa){var[p,m]=f.unpack_from("<QQ",e,i);_.push([p,m])}u+=xa+t.get("size"),c[g]=t}return[c,h,i]}_parse_v2_objects(e,t){var[i,n,a]=this._parse_v2_header(e,t);t=a;for(var s=[],o=i.get("size_of_chunk_0"),l=e.slice(t,t+=o),h=[[a,o]],_=0,d=0;;){if(d>=o){let e=h[++_];if(null==e)break;[a,o]=e,d=0}let t=r(za,e,a+d),i=a+d+Ea+n;if(t.set("offset_to_message",i),t.get("type")==Qa){var[u,c]=f.unpack_from("<QQ",e,i);h.push([u,c])}d+=Ea+t.get("size")+n,s.push(t)}return[s,l,i]}_parse_v2_header(e,t){let i=r(ma,e,t);var n;if(t+=l(ma),o(2==i.get("version")),n=4&i.get("flags")?2:0,o(0==(16&i.get("flags"))),32&i.get("flags")){let n=f.unpack_from("<4I",e,t);t+=16,i.set("access_time",n[0]),i.set("modification_time",n[1]),i.set("change_time",n[2]),i.set("birth_time",n[3])}let a=["<B","<H","<I","<Q"][3&i.get("flags")];return i.set("size_of_chunk_0",f.unpack_from(a,e,t)[0]),[i,n,t+=f.calcsize(a)]}get_links(){let e=this.find_msg_type(La);return e.length>0?this._get_links_from_symbol_tables(e):this._get_links_from_link_msgs()}_get_links_from_symbol_tables(e){o(1==e.length),o(16==e[0].get("size"));let t=r(Ba,this.fh,e[0].get("offset_to_message"));var i=new Hn(this.fh,t.get("btree_address")),n=new Gn(this.fh,t.get("heap_address")),a={};for(var s of i.symbol_table_addresses()){let e=new Kn(this.fh,s);e.assign_name(n);let t=e.get_links();for(var l in t)a[l]=t[l]}return a}_get_links_from_link_msgs(){var e={},t=this.find_msg_type(Ma);for(var i of t){let t=i.get("offset_to_message");var[n,a]=f.unpack_from("<BB",this.fh,t);t+=2,o(1==n),o(0==(1&a)),o(0==(2&a)),o(0==(8&a)),o(0==(16&a)),4&a&&(t+=8);let s=f.unpack_from("<B",this.fh,t)[0];t+=1;let r=f.unpack_from("<"+s.toFixed()+"s",this.fh,t);t+=s;let l=f.unpack_from("<Q",this.fh,t)[0];e[r]=l}return e}get is_dataset(){return this.find_msg_type(Fa).length>0}get_data(){let e=this.find_msg_type(Oa)[0].get("offset_to_message");var[t,i,n,a]=this._get_data_message_properties(e);if(2==n)return this._get_chunked_data(e);o(1==n);var[s]=f.unpack_from("<Q",this.fh,a);let r=f.unpack_from("<II",this.fh,a);if(r[0]==_a[0]&&r[1]==_a[1]){let e=this.shape.reduce((function(e,t){return e*t}),1);return new Array(e)}var l=this.shape.reduce((function(e,t){return e*t}),1);if(this.dtype instanceof Array){let e=this.dtype[0];if("REFERENCE"==e){if(8!=this.dtype[1])throw"NotImplementedError('Unsupported Reference type')";return this.fh.slice(s,s+l)}if("VLEN_STRING"==e){var[h,_,u]=this.dtype,g=[];for(v=0;v<l;v++){var[p,m]=this._vlen_size_and_data(this.fh,s);let e="<"+p.toFixed()+"s",t=f.unpack_from(e,m,0)[0];g[v]=0==u?t:decodeURIComponent(escape(t)),s+=16}return g}throw"NotImplementedError('datatype not implemented')"}{let e=this.dtype;if(/[<>=!@\|]?(i|u|f|S)(\d*)/.test(e)){let[t,i,n]=d(e),a=new Array(l),r=new c(this.fh);for(var v=0;v<l;v++)a[v]=r[t](s+v*n,!i,n);return a}throw"not Implemented - no proper dtype defined"}}_get_chunked_data(e){this._get_chunk_params();let t=new Zn(this.fh,this._chunk_address,this._chunk_dims).construct_data_from_chunks(this.chunks,this.shape,this.dtype,this.filter_pipeline);if(this.dtype instanceof Array&&/^VLEN/.test(this.dtype[0])){let e=this.dtype[0];for(var i=0;i<t.length;i++){let[a,s,r]=t[i];var n;s in this._global_heaps?n=this._global_heaps[s]:(n=new Yn(this.fh,s),this._global_heaps[s]=n);let o=n.objects.get(r);if("VLEN_STRING"==e){let e=this.dtype[2],n="<"+a.toFixed()+"s",s=f.unpack_from(n,o,0)[0];t[i]=0==e?s:decodeURIComponent(escape(s))}}}return t}_get_chunk_params(){if(!this._chunk_params_set){this._chunk_params_set=!0;var e=this.find_msg_type(Oa)[0].get("offset_to_message"),[t,i,n,a]=this._get_data_message_properties(e);if(2==n){var s;if(1==t||2==t){var r=f.unpack_from("<Q",this.fh,a)[0];s=a+f.calcsize("<Q")}else if(3==t){var[i,r]=f.unpack_from("<BQ",this.fh,a);s=a+f.calcsize("<BQ")}o(t>=1&&t<=3);var l="<"+(i-1).toFixed()+"I",h=f.unpack_from(l,this.fh,s);this._chunks=h,this._chunk_dims=i,this._chunk_address=r}}}_get_data_message_properties(e){var[t,i,n]=[null,null,null],[a,s,r]=f.unpack_from("<BBB",this.fh,e);return 1==a||2==a?(t=s,n=e+8,o(1==(i=r)||2==i)):3!=a&&4!=a||(i=s,n=e,n+=f.calcsize("<BB")),o(a>=1&&a<=4),[a,t,i,n]}}var _a=f.unpack_from("<II",new Uint8Array([255,255,255,255,255,255,255,255]).buffer),da=new Map([["collection_address","Q"],["object_index","I"]]),fa=(l(da),new Map([["version","B"],["reserved","B"],["name_size","H"],["datatype_size","H"],["dataspace_size","H"]])),ua=l(fa),ca=new Map([["version","B"],["flags","B"],["name_size","H"],["datatype_size","H"],["dataspace_size","H"],["character_set_encoding","B"]]),ga=l(ca),pa=new Map([["version","B"],["reserved","B"],["total_header_messages","H"],["object_reference_count","I"],["object_header_size","I"],["padding","I"]]),ma=new Map([["signature","4s"],["version","B"],["flags","B"]]),va=new Map([["version","B"],["dimensionality","B"],["flags","B"],["reserved_0","B"],["reserved_1","I"]]),ba=l(va),wa=new Map([["version","B"],["dimensionality","B"],["flags","B"],["type","B"]]),ka=l(wa),ya=new Map([["type","H"],["size","H"],["flags","B"],["reserved","3s"]]),xa=l(ya),za=new Map([["type","B"],["size","H"],["flags","B"]]),Ea=l(za),Ba=new Map([["btree_address","Q"],["heap_address","Q"]]),Ia=new Map([["version","B"],["space_allocation_time","B"],["fillvalue_write_time","B"],["fillvalue_defined","B"]]),Sa=l(Ia),Aa=new Map([["version","B"],["flags","B"]]),Na=l(Aa),ja=new Map([["filter_id","H"],["name_length","H"],["flags","H"],["client_data_values","H"]]),Ua=l(ja),Fa=1,Ra=3,Ca=5,Ma=6,Oa=8,Ha=11,Za=12,Qa=16,La=17;const Ta="0.4.0.dev";class Da{constructor(e,t,i,n=!1){if(null==i?(this.parent=this,this.file=this):(this.parent=i,this.file=i.file),this.name=e,this._links=t.get_links(),this._dataobjects=t,this._attrs=null,this._keys=null,n)return new Proxy(this,Pa)}get keys(){return null==this._keys&&(this._keys=Object.keys(this._links)),this._keys.slice()}get values(){return this.keys.map(e=>this.get(e))}length(){return this.keys.length}_dereference(e){if(!e)throw"cannot deference null reference";let t=this.file._get_object_by_address(e);if(null==t)throw"reference not found in file";return t}get(e){if("number"==typeof e)return this._dereference(e);var t=Ka(e);if("/"==t)return this.file;if("."==t)return this;if(/^\//.test(t))return this.file.get(t.slice(1));if(""!=function(e){let t=e.lastIndexOf("/")+1,i=e.slice(0,t),n=new RegExp("^/+$"),a=new RegExp("/$");i&&!n.test(i)&&(i=i.replace(a,""));return i}(t))var[i,n]=t.split(/\/(.*)/);else var i=t,n=".";if(!(i in this._links))throw i+" not found in group";var a=Ka(this.name+"/"+i),s=new ha(this.file._fh,this._links[i]);if(s.is_dataset){if("."!=n)throw a+" is a dataset, not a group";return new Ga(a,s,this)}return new Da(a,s,this).get(n)}visit(e){return this.visititems((t,i)=>e(t))}visititems(e){var t=this.name.length;/\/$/.test(this.name)||(t+=1);for(var i=this.values.slice();i;){let n=i.shift();1==i.length&&console.log(n);let a=e(n.name.slice(t),n);if(null!=a)return a;n instanceof Da&&(i=i.concat(n.values))}return null}get attrs(){return null==this._attrs&&(this._attrs=this._dataobjects.get_attributes()),this._attrs}}const Pa={get:function(e,t,i){return t in e?e[t]:e.get(t)}};class Va extends Da{constructor(e,t){var i=new Vn(e,0).offset_to_dataobjects;super("/",new ha(e,i),null),this.parent=this,this._fh=e,this.filename=t||"",this.file=this,this.mode="r",this.userblock_size=0}_get_object_by_address(e){return this._dataobjects.offset==e?this:this.visititems(e=>{e._dataobjects.offset})}}class Ga extends Array{constructor(e,t,i){super(),this.parent=i,this.file=i.file,this.name=e,this._dataobjects=t,this._attrs=null,this._astype=null}get value(){var e=this._dataobjects.get_data();return null==this._astype?e:e.astype(this._astype)}get shape(){return this._dataobjects.shape}get attrs(){return this._dataobjects.get_attributes()}get dtype(){return this._dataobjects.dtype}get fillvalue(){return this._dataobjects.fillvalue}}function Ka(e){return e.replace(/\/(\/)+/g,"/")}window.hdf5=n;var Ya=function(e,t,i,n){return new(i||(i=Promise))((function(a,s){function r(e){try{l(n.next(e))}catch(e){s(e)}}function o(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,o)}l((n=n.apply(e,t||[])).next())}))},Xa=function(e){return this instanceof Xa?(this.v=e,this):new Xa(e)},$a=function(e,t,i){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,a=i.apply(e,t||[]),s=[];return n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n;function r(e){a[e]&&(n[e]=function(t){return new Promise((function(i,n){s.push([e,t,i,n])>1||o(e,t)}))})}function o(e,t){try{(i=a[e](t)).value instanceof Xa?Promise.resolve(i.value.v).then(l,h):_(s[0][2],i)}catch(e){_(s[0][3],e)}var i}function l(e){o("next",e)}function h(e){o("throw",e)}function _(e,t){e(t),s.shift(),s.length&&o(s[0][0],s[0][1])}};const qa="http://10.6.96.143:2048";class Ja{constructor(){this.categories=[],this.train=a.data.generator(()=>this.generateData("train_files.txt",32))}static init(){return Ya(this,void 0,void 0,(function*(){const e=new Ja;return e.categories=yield e.loadCategories(),e}))}generateData(e,t){return $a(this,arguments,(function*(){const i=yield Xa(this.getDatasetPaths(e));for(const e of i.slice(0,2)){const{data:i,label:n}=yield Xa(this.loadH5([qa,e].join("/"))),s=Math.ceil(n.length/t);for(let e=0;e<s;++e){const s=e*t,r=s+t,o=i.slice(2048*s*3,2048*r*3),l=n.slice(s,r);yield yield Xa(a.tidy(()=>{const e=[o.length/2048/3,2048,3,1],t=a.tensor(o,e,"float32"),i=this.categories.length;return{xs:t,ys:a.oneHot(a.tensor1d(l,"int32"),i)}}))}}}))}loadCategories(){return Ya(this,void 0,void 0,(function*(){const e=yield fetch([qa,"shape_names.txt"].join("/"));return(yield e.text()).split("\n").filter(e=>e)}))}getDatasetPaths(e){return Ya(this,void 0,void 0,(function*(){const t=yield fetch([qa,e].join("/"));return(yield t.text()).split("\n").filter(e=>e)}))}loadH5(e){return Ya(this,void 0,void 0,(function*(){const t=yield fetch(e),i=yield t.arrayBuffer(),n=new Va(i,"ply_data_train0.h5");return{data:n.get("data").value,label:n.get("label").value}}))}}var Wa=function(e,t,i,n){return new(i||(i=Promise))((function(a,s){function r(e){try{l(n.next(e))}catch(e){s(e)}}function o(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(r,o)}l((n=n.apply(e,t||[])).next())}))};class es{init(){return Wa(this,void 0,void 0,(function*(){this.dataset=yield Ja.init(),this.model=a.sequential({layers:[a.layers.conv2d({filters:64,kernelSize:[1,3],inputShape:[2048,3,1]}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.conv2d({filters:64,kernelSize:1}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.conv2d({filters:64,kernelSize:1}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.conv2d({filters:128,kernelSize:1}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.conv2d({filters:1024,kernelSize:1}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.maxPool2d({poolSize:[2048,1],strides:1}),a.layers.flatten(),a.layers.dense({units:512}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.dropout({rate:.3}),a.layers.dense({units:256}),a.layers.batchNormalization(),a.layers.activation({activation:"relu"}),a.layers.dropout({rate:.3}),a.layers.dense({units:this.dataset.categories.length}),a.layers.batchNormalization(),a.layers.activation({activation:"softmax"})]}),this.model.summary(),this.model.compile({optimizer:a.train.adam(),loss:"categoricalCrossentropy",metrics:["accuracy"]})}))}train(){return Wa(this,void 0,void 0,(function*(){if(!this.model||!this.dataset)return;yield s.show.modelSummary({name:"Model Architecture"},this.model);const e=s.show.fitCallbacks({name:"Model Training"},["loss","val_loss","acc","val_acc"]);return this.model.fitDataset(this.dataset.train,{epochs:1,callbacks:[e,{onBatchEnd(){return Wa(this,void 0,void 0,(function*(){const e=a.memory();console.log(`numTensors: ${e.numTensors}`)}))}}]})}))}}setTimeout((function(){return Wa(this,void 0,void 0,(function*(){if(yield a.setBackend("webgl")){const e=new es;yield e.init(),e.train()}}))}),5e3)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,